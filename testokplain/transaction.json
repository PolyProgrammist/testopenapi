{
  "openapi": "3.0.0",
  "info": {
    "title": "My API",
    "version": "1.0.0"
  },
  "paths": {
    "/block": {
      "post": {
        "operationId": "block",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_BlockMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/broadcast_tx_async": {
      "post": {
        "operationId": "broadcast_tx_async",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_BroadCastTxAsyncMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/broadcast_tx_commit": {
      "post": {
        "operationId": "broadcast_tx_commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_BroadCastTxCommitMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/chunk": {
      "post": {
        "operationId": "chunk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_BlockMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/client_config": {
      "post": {
        "operationId": "client_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_ClientConfigMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/gas_price": {
      "post": {
        "operationId": "gas_price",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_GasPriceMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "post": {
        "operationId": "health",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_HealthMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcHealthResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/light_client_proof": {
      "post": {
        "operationId": "light_client_proof",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_LightClientProofMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/network_info": {
      "post": {
        "operationId": "network_info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_NetworkInfoMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/next_light_client_block": {
      "post": {
        "operationId": "next_light_client_block",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_NextLightClientBlockMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/send_tx": {
      "post": {
        "operationId": "send_tx",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_SendTxMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "post": {
        "operationId": "status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_StatusMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcStatusResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/tx": {
      "post": {
        "operationId": "tx",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_TxMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcTransactionResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    },
    "/validators": {
      "post": {
        "operationId": "validators",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonRpcRequest_for_ValidatorsMethodNameHelperEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonRpcResponse_for_RpcValidatorResponse_and_RpcError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessKey": {
        "description": "Access key provides limited access to an account. Each access key belongs to some account and is identified by a unique (within the account) public key. One account may have large number of access keys. Access keys allow to act on behalf of the account by restricting transactions that can be issued. `account_id,public_key` is a key in the state",
        "type": "object",
        "required": [
          "nonce",
          "permission"
        ],
        "properties": {
          "nonce": {
            "description": "Nonce for this access key, used for tx nonce generation. When access key is created, nonce is set to `(block_height - 1) * 1e6` to avoid tx hash collision on access key re-creation. See <https://github.com/near/nearcore/issues/3779> for more details.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "permission": {
            "description": "Defines permissions for this access key.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessKeyPermission"
              }
            ]
          }
        }
      },
      "AccessKeyPermission": {
        "description": "Defines permissions for AccessKey",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "FunctionCall"
            ],
            "properties": {
              "FunctionCall": {
                "$ref": "#/components/schemas/FunctionCallPermission"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Grants full access to the account. NOTE: It's used to replace account-level public keys.",
            "type": "string",
            "enum": [
              "FullAccess"
            ]
          }
        ]
      },
      "AccessKeyPermissionView": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "FullAccess"
            ]
          },
          {
            "type": "object",
            "required": [
              "FunctionCall"
            ],
            "properties": {
              "FunctionCall": {
                "type": "object",
                "required": [
                  "allowance",
                  "method_names",
                  "receiver_id"
                ],
                "properties": {
                  "allowance": {
                    "type": "string"
                  },
                  "method_names": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "receiver_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AccessKeyView": {
        "type": "object",
        "required": [
          "nonce",
          "permission"
        ],
        "properties": {
          "nonce": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "permission": {
            "$ref": "#/components/schemas/AccessKeyPermissionView"
          }
        }
      },
      "AccountDataView": {
        "type": "object",
        "required": [
          "account_key",
          "peer_id",
          "proxies",
          "timestamp"
        ],
        "properties": {
          "account_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "peer_id": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "proxies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tier1ProxyView"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "AccountId": {
        "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
        "type": "string"
      },
      "Action": {
        "oneOf": [
          {
            "description": "Create an (sub)account using a transaction `receiver_id` as an ID for a new account ID must pass validation rules described here <http://nomicon.io/Primitives/Account.html>.",
            "type": "object",
            "required": [
              "CreateAccount"
            ],
            "properties": {
              "CreateAccount": {
                "$ref": "#/components/schemas/CreateAccountAction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a Wasm code to a receiver_id",
            "type": "object",
            "required": [
              "DeployContract"
            ],
            "properties": {
              "DeployContract": {
                "$ref": "#/components/schemas/DeployContractAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "FunctionCall"
            ],
            "properties": {
              "FunctionCall": {
                "$ref": "#/components/schemas/FunctionCallAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Transfer"
            ],
            "properties": {
              "Transfer": {
                "$ref": "#/components/schemas/TransferAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Stake"
            ],
            "properties": {
              "Stake": {
                "$ref": "#/components/schemas/StakeAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "AddKey"
            ],
            "properties": {
              "AddKey": {
                "$ref": "#/components/schemas/AddKeyAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeleteKey"
            ],
            "properties": {
              "DeleteKey": {
                "$ref": "#/components/schemas/DeleteKeyAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeleteAccount"
            ],
            "properties": {
              "DeleteAccount": {
                "$ref": "#/components/schemas/DeleteAccountAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Delegate"
            ],
            "properties": {
              "Delegate": {
                "$ref": "#/components/schemas/SignedDelegateAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeployGlobalContract"
            ],
            "properties": {
              "DeployGlobalContract": {
                "$ref": "#/components/schemas/DeployGlobalContractAction"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "UseGlobalContract"
            ],
            "properties": {
              "UseGlobalContract": {
                "$ref": "#/components/schemas/UseGlobalContractAction"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionError": {
        "description": "An error happened during Action execution",
        "type": "object",
        "required": [
          "kind"
        ],
        "properties": {
          "index": {
            "description": "Index of the failed action in the transaction. Action index is not defined if ActionError.kind is `ActionErrorKind::LackBalanceForState`",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "kind": {
            "description": "The kind of ActionError happened",
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionErrorKind"
              }
            ]
          }
        }
      },
      "ActionErrorKind": {
        "oneOf": [
          {
            "description": "Happens when CreateAccount action tries to create an account with account_id which is already exists in the storage",
            "type": "object",
            "required": [
              "AccountAlreadyExists"
            ],
            "properties": {
              "AccountAlreadyExists": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Happens when TX receiver_id doesn't exist (but action is not Action::CreateAccount)",
            "type": "object",
            "required": [
              "AccountDoesNotExist"
            ],
            "properties": {
              "AccountDoesNotExist": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A top-level account ID can only be created by registrar.",
            "type": "object",
            "required": [
              "CreateAccountOnlyByRegistrar"
            ],
            "properties": {
              "CreateAccountOnlyByRegistrar": {
                "type": "object",
                "required": [
                  "account_id",
                  "predecessor_id",
                  "registrar_account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "predecessor_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "registrar_account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A newly created account must be under a namespace of the creator account",
            "type": "object",
            "required": [
              "CreateAccountNotAllowed"
            ],
            "properties": {
              "CreateAccountNotAllowed": {
                "type": "object",
                "required": [
                  "account_id",
                  "predecessor_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "predecessor_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Administrative actions like `DeployContract`, `Stake`, `AddKey`, `DeleteKey`. can be proceed only if sender=receiver or the first TX action is a `CreateAccount` action",
            "type": "object",
            "required": [
              "ActorNoPermission"
            ],
            "properties": {
              "ActorNoPermission": {
                "type": "object",
                "required": [
                  "account_id",
                  "actor_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "actor_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Account tries to remove an access key that doesn't exist",
            "type": "object",
            "required": [
              "DeleteKeyDoesNotExist"
            ],
            "properties": {
              "DeleteKeyDoesNotExist": {
                "type": "object",
                "required": [
                  "account_id",
                  "public_key"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The public key is already used for an existing access key",
            "type": "object",
            "required": [
              "AddKeyAlreadyExists"
            ],
            "properties": {
              "AddKeyAlreadyExists": {
                "type": "object",
                "required": [
                  "account_id",
                  "public_key"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Account is staking and can not be deleted",
            "type": "object",
            "required": [
              "DeleteAccountStaking"
            ],
            "properties": {
              "DeleteAccountStaking": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "ActionReceipt can't be completed, because the remaining balance will not be enough to cover storage.",
            "type": "object",
            "required": [
              "LackBalanceForState"
            ],
            "properties": {
              "LackBalanceForState": {
                "type": "object",
                "required": [
                  "account_id",
                  "amount"
                ],
                "properties": {
                  "account_id": {
                    "description": "An account which needs balance",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      }
                    ]
                  },
                  "amount": {
                    "description": "Balance required to complete an action.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Account is not yet staked, but tries to unstake",
            "type": "object",
            "required": [
              "TriesToUnstake"
            ],
            "properties": {
              "TriesToUnstake": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The account doesn't have enough balance to increase the stake.",
            "type": "object",
            "required": [
              "TriesToStake"
            ],
            "properties": {
              "TriesToStake": {
                "type": "object",
                "required": [
                  "account_id",
                  "balance",
                  "locked",
                  "stake"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "balance": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "string"
                  },
                  "stake": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "InsufficientStake"
            ],
            "properties": {
              "InsufficientStake": {
                "type": "object",
                "required": [
                  "account_id",
                  "minimum_stake",
                  "stake"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "minimum_stake": {
                    "type": "string"
                  },
                  "stake": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error occurred during a `FunctionCall` Action, parameter is debug message.",
            "type": "object",
            "required": [
              "FunctionCallError"
            ],
            "properties": {
              "FunctionCallError": {
                "$ref": "#/components/schemas/FunctionCallError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Error occurs when a new `ActionReceipt` created by the `FunctionCall` action fails receipt validation.",
            "type": "object",
            "required": [
              "NewReceiptValidationError"
            ],
            "properties": {
              "NewReceiptValidationError": {
                "$ref": "#/components/schemas/ReceiptValidationError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Error occurs when a `CreateAccount` action is called on a NEAR-implicit or ETH-implicit account. See NEAR-implicit account creation NEP: <https://github.com/nearprotocol/NEPs/pull/71>. Also, see ETH-implicit account creation NEP: <https://github.com/near/NEPs/issues/518>.\n\nTODO(#8598): This error is named very poorly. A better name would be `OnlyNamedAccountCreationAllowed`.",
            "type": "object",
            "required": [
              "OnlyImplicitAccountCreationAllowed"
            ],
            "properties": {
              "OnlyImplicitAccountCreationAllowed": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delete account whose state is large is temporarily banned.",
            "type": "object",
            "required": [
              "DeleteAccountWithLargeState"
            ],
            "properties": {
              "DeleteAccountWithLargeState": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Signature does not match the provided actions and given signer public key.",
            "type": "string",
            "enum": [
              "DelegateActionInvalidSignature"
            ]
          },
          {
            "description": "Receiver of the transaction doesn't match Sender of the delegate action",
            "type": "object",
            "required": [
              "DelegateActionSenderDoesNotMatchTxReceiver"
            ],
            "properties": {
              "DelegateActionSenderDoesNotMatchTxReceiver": {
                "type": "object",
                "required": [
                  "receiver_id",
                  "sender_id"
                ],
                "properties": {
                  "receiver_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "sender_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delegate action has expired. `max_block_height` is less than actual block height.",
            "type": "string",
            "enum": [
              "DelegateActionExpired"
            ]
          },
          {
            "description": "The given public key doesn't exist for Sender account",
            "type": "object",
            "required": [
              "DelegateActionAccessKeyError"
            ],
            "properties": {
              "DelegateActionAccessKeyError": {
                "$ref": "#/components/schemas/InvalidAccessKeyError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "DelegateAction nonce must be greater sender[public_key].nonce",
            "type": "object",
            "required": [
              "DelegateActionInvalidNonce"
            ],
            "properties": {
              "DelegateActionInvalidNonce": {
                "type": "object",
                "required": [
                  "ak_nonce",
                  "delegate_nonce"
                ],
                "properties": {
                  "ak_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "delegate_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "DelegateAction nonce is larger than the upper bound given by the block height",
            "type": "object",
            "required": [
              "DelegateActionNonceTooLarge"
            ],
            "properties": {
              "DelegateActionNonceTooLarge": {
                "type": "object",
                "required": [
                  "delegate_nonce",
                  "upper_bound"
                ],
                "properties": {
                  "delegate_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "upper_bound": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "GlobalContractDoesNotExist"
            ],
            "properties": {
              "GlobalContractDoesNotExist": {
                "type": "object",
                "required": [
                  "identifier"
                ],
                "properties": {
                  "identifier": {
                    "$ref": "#/components/schemas/GlobalContractIdentifier"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionView": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "CreateAccount"
            ]
          },
          {
            "type": "object",
            "required": [
              "DeployContract"
            ],
            "properties": {
              "DeployContract": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "FunctionCall"
            ],
            "properties": {
              "FunctionCall": {
                "type": "object",
                "required": [
                  "args",
                  "deposit",
                  "gas",
                  "method_name"
                ],
                "properties": {
                  "args": {
                    "type": "string"
                  },
                  "deposit": {
                    "type": "string"
                  },
                  "gas": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "method_name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Transfer"
            ],
            "properties": {
              "Transfer": {
                "type": "object",
                "required": [
                  "deposit"
                ],
                "properties": {
                  "deposit": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Stake"
            ],
            "properties": {
              "Stake": {
                "type": "object",
                "required": [
                  "public_key",
                  "stake"
                ],
                "properties": {
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  },
                  "stake": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "AddKey"
            ],
            "properties": {
              "AddKey": {
                "type": "object",
                "required": [
                  "access_key",
                  "public_key"
                ],
                "properties": {
                  "access_key": {
                    "$ref": "#/components/schemas/AccessKeyView"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeleteKey"
            ],
            "properties": {
              "DeleteKey": {
                "type": "object",
                "required": [
                  "public_key"
                ],
                "properties": {
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeleteAccount"
            ],
            "properties": {
              "DeleteAccount": {
                "type": "object",
                "required": [
                  "beneficiary_id"
                ],
                "properties": {
                  "beneficiary_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Delegate"
            ],
            "properties": {
              "Delegate": {
                "type": "object",
                "required": [
                  "delegate_action",
                  "signature"
                ],
                "properties": {
                  "delegate_action": {
                    "$ref": "#/components/schemas/DelegateAction"
                  },
                  "signature": {
                    "$ref": "#/components/schemas/Signature"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeployGlobalContract"
            ],
            "properties": {
              "DeployGlobalContract": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "DeployGlobalContractByAccountId"
            ],
            "properties": {
              "DeployGlobalContractByAccountId": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "UseGlobalContract"
            ],
            "properties": {
              "UseGlobalContract": {
                "type": "object",
                "required": [
                  "code_hash"
                ],
                "properties": {
                  "code_hash": {
                    "$ref": "#/components/schemas/CryptoHash"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "UseGlobalContractByAccountId"
            ],
            "properties": {
              "UseGlobalContractByAccountId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ActionsValidationError": {
        "description": "Describes the error for validating a list of actions.",
        "oneOf": [
          {
            "description": "The delete action must be a final action in transaction",
            "type": "string",
            "enum": [
              "DeleteActionMustBeFinal"
            ]
          },
          {
            "description": "The total prepaid gas (for all given actions) exceeded the limit.",
            "type": "object",
            "required": [
              "TotalPrepaidGasExceeded"
            ],
            "properties": {
              "TotalPrepaidGasExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "total_prepaid_gas"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "total_prepaid_gas": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The number of actions exceeded the given limit.",
            "type": "object",
            "required": [
              "TotalNumberOfActionsExceeded"
            ],
            "properties": {
              "TotalNumberOfActionsExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "total_number_of_actions"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "total_number_of_actions": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The total number of bytes of the method names exceeded the limit in a Add Key action.",
            "type": "object",
            "required": [
              "AddKeyMethodNamesNumberOfBytesExceeded"
            ],
            "properties": {
              "AddKeyMethodNamesNumberOfBytesExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "total_number_of_bytes"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "total_number_of_bytes": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The length of some method name exceeded the limit in a Add Key action.",
            "type": "object",
            "required": [
              "AddKeyMethodNameLengthExceeded"
            ],
            "properties": {
              "AddKeyMethodNameLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Integer overflow during a compute.",
            "type": "string",
            "enum": [
              "IntegerOverflow"
            ]
          },
          {
            "description": "Invalid account ID.",
            "type": "object",
            "required": [
              "InvalidAccountId"
            ],
            "properties": {
              "InvalidAccountId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The size of the contract code exceeded the limit in a DeployContract action.",
            "type": "object",
            "required": [
              "ContractSizeExceeded"
            ],
            "properties": {
              "ContractSizeExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "size"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "size": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The length of the method name exceeded the limit in a Function Call action.",
            "type": "object",
            "required": [
              "FunctionCallMethodNameLengthExceeded"
            ],
            "properties": {
              "FunctionCallMethodNameLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The length of the arguments exceeded the limit in a Function Call action.",
            "type": "object",
            "required": [
              "FunctionCallArgumentsLengthExceeded"
            ],
            "properties": {
              "FunctionCallArgumentsLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An attempt to stake with a public key that is not convertible to ristretto.",
            "type": "object",
            "required": [
              "UnsuitableStakingKey"
            ],
            "properties": {
              "UnsuitableStakingKey": {
                "type": "object",
                "required": [
                  "public_key"
                ],
                "properties": {
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The attached amount of gas in a FunctionCall action has to be a positive number.",
            "type": "string",
            "enum": [
              "FunctionCallZeroAttachedGas"
            ]
          },
          {
            "description": "There should be the only one DelegateAction",
            "type": "string",
            "enum": [
              "DelegateActionMustBeOnlyOne"
            ]
          },
          {
            "description": "The transaction includes a feature that the current protocol version does not support.\n\nNote: we stringify the protocol feature name instead of using `ProtocolFeature` here because we don't want to leak the internals of that type into observable borsh serialization.",
            "type": "object",
            "required": [
              "UnsupportedProtocolFeature"
            ],
            "properties": {
              "UnsupportedProtocolFeature": {
                "type": "object",
                "required": [
                  "protocol_feature",
                  "version"
                ],
                "properties": {
                  "protocol_feature": {
                    "type": "string"
                  },
                  "version": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AddKeyAction": {
        "type": "object",
        "required": [
          "access_key",
          "public_key"
        ],
        "properties": {
          "access_key": {
            "description": "An access key with the permission",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessKey"
              }
            ]
          },
          "public_key": {
            "description": "A public key which will be associated with an access_key",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ]
          }
        }
      },
      "BandwidthRequest": {
        "description": "`BandwidthRequest` describes the size of receipts that a shard would like to send to another shard. When a shard wants to send a lot of receipts to another shard, it needs to create a request and wait for a bandwidth grant from the bandwidth scheduler.",
        "type": "object",
        "required": [
          "requested_values_bitmap",
          "to_shard"
        ],
        "properties": {
          "requested_values_bitmap": {
            "description": "Bitmap which describes what values of bandwidth are requested.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BandwidthRequestBitmap"
              }
            ]
          },
          "to_shard": {
            "description": "Requesting bandwidth to this shard.",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "BandwidthRequestBitmap": {
        "description": "Bitmap which describes which values from the predefined list are being requested. The nth bit is set to 1 when the nth value from the list is being requested.",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "maxItems": 5,
            "minItems": 5
          }
        }
      },
      "BandwidthRequests": {
        "description": "A list of shard's bandwidth requests. Describes how much the shard would like to send to other shards.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "V1"
            ],
            "properties": {
              "V1": {
                "$ref": "#/components/schemas/BandwidthRequestsV1"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BandwidthRequestsV1": {
        "type": "object",
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BandwidthRequest"
            }
          }
        }
      },
      "BlockHeaderInnerLiteView": {
        "type": "object",
        "required": [
          "block_merkle_root",
          "epoch_id",
          "height",
          "next_bp_hash",
          "next_epoch_id",
          "outcome_root",
          "prev_state_root",
          "timestamp",
          "timestamp_nanosec"
        ],
        "properties": {
          "block_merkle_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "epoch_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "next_bp_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "next_epoch_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "outcome_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_state_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "timestamp": {
            "description": "Legacy json number. Should not be used.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestamp_nanosec": {
            "type": "string"
          }
        }
      },
      "BlockHeaderView": {
        "type": "object",
        "required": [
          "approvals",
          "block_merkle_root",
          "challenges_result",
          "challenges_root",
          "chunk_headers_root",
          "chunk_mask",
          "chunk_receipts_root",
          "chunk_tx_root",
          "chunks_included",
          "epoch_id",
          "gas_price",
          "hash",
          "height",
          "last_ds_final_block",
          "last_final_block",
          "latest_protocol_version",
          "next_bp_hash",
          "next_epoch_id",
          "outcome_root",
          "prev_hash",
          "prev_state_root",
          "random_value",
          "rent_paid",
          "signature",
          "timestamp",
          "timestamp_nanosec",
          "total_supply",
          "validator_proposals",
          "validator_reward"
        ],
        "properties": {
          "approvals": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Signature"
                }
              ],
              "nullable": true
            }
          },
          "block_body_hash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptoHash"
              }
            ],
            "nullable": true
          },
          "block_merkle_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "block_ordinal": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "challenges_result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlashedValidator"
            }
          },
          "challenges_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "chunk_endorsements": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "nullable": true
          },
          "chunk_headers_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "chunk_mask": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          },
          "chunk_receipts_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "chunk_tx_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "chunks_included": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "epoch_sync_data_hash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptoHash"
              }
            ],
            "nullable": true
          },
          "gas_price": {
            "type": "string"
          },
          "hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "last_ds_final_block": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "last_final_block": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "latest_protocol_version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "next_bp_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "next_epoch_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "outcome_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "prev_state_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "random_value": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "rent_paid": {
            "description": "TODO(2271): deprecated.",
            "type": "string"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          },
          "timestamp": {
            "description": "Legacy json number. Should not be used.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestamp_nanosec": {
            "type": "string"
          },
          "total_supply": {
            "type": "string"
          },
          "validator_proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            }
          },
          "validator_reward": {
            "description": "TODO(2271): deprecated.",
            "type": "string"
          }
        }
      },
      "BlockId": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "$ref": "#/components/schemas/CryptoHash"
          }
        ]
      },
      "BlockMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "block"
        ]
      },
      "BlockStatusView": {
        "type": "object",
        "required": [
          "hash",
          "height"
        ],
        "properties": {
          "hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "BroadCastTxAsyncMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "broadcast_tx_async"
        ]
      },
      "BroadCastTxCommitMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "broadcast_tx_commit"
        ]
      },
      "CatchupStatusView": {
        "type": "object",
        "required": [
          "blocks_to_catchup",
          "shard_sync_status",
          "sync_block_hash",
          "sync_block_height"
        ],
        "properties": {
          "blocks_to_catchup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockStatusView"
            }
          },
          "shard_sync_status": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sync_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "sync_block_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "CauseRpcErrorKind": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/RpcRequestValidationErrorKind"
          },
          {},
          {}
        ]
      },
      "ChunkDistributionNetworkConfig": {
        "description": "Config for the Chunk Distribution Network feature. This allows nodes to push and pull chunks from a central stream. The two benefits of this approach are: (1) less request/response traffic on the peer-to-peer network and (2) lower latency for RPC nodes indexing the chain.",
        "type": "object",
        "required": [
          "enabled",
          "uris"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "uris": {
            "$ref": "#/components/schemas/ChunkDistributionUris"
          }
        }
      },
      "ChunkDistributionUris": {
        "description": "URIs for the Chunk Distribution Network feature.",
        "type": "object",
        "required": [
          "get",
          "set"
        ],
        "properties": {
          "get": {
            "description": "URI for pulling chunks from the stream.",
            "type": "string"
          },
          "set": {
            "description": "URI for publishing chunks to the stream.",
            "type": "string"
          }
        }
      },
      "ChunkHeaderView": {
        "type": "object",
        "required": [
          "balance_burnt",
          "chunk_hash",
          "encoded_length",
          "encoded_merkle_root",
          "gas_limit",
          "gas_used",
          "height_created",
          "height_included",
          "outcome_root",
          "outgoing_receipts_root",
          "prev_block_hash",
          "prev_state_root",
          "rent_paid",
          "shard_id",
          "signature",
          "tx_root",
          "validator_proposals",
          "validator_reward"
        ],
        "properties": {
          "balance_burnt": {
            "type": "string"
          },
          "bandwidth_requests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BandwidthRequests"
              }
            ],
            "nullable": true
          },
          "chunk_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "congestion_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CongestionInfoView"
              }
            ],
            "nullable": true
          },
          "encoded_length": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "encoded_merkle_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "gas_limit": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gas_used": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "height_created": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "height_included": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "outcome_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "outgoing_receipts_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_state_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "rent_paid": {
            "description": "TODO(2271): deprecated.",
            "type": "string"
          },
          "shard_id": {
            "$ref": "#/components/schemas/ShardId"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          },
          "tx_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "validator_proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            }
          },
          "validator_reward": {
            "description": "TODO(2271): deprecated.",
            "type": "string"
          }
        }
      },
      "ClientConfigMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "client_config"
        ]
      },
      "CompilationError": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "CodeDoesNotExist"
            ],
            "properties": {
              "CodeDoesNotExist": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "PrepareError"
            ],
            "properties": {
              "PrepareError": {
                "$ref": "#/components/schemas/PrepareError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is for defense in depth. We expect our runtime-independent preparation code to fully catch all invalid wasms, but, if it ever misses something we’ll emit this error",
            "type": "object",
            "required": [
              "WasmerCompileError"
            ],
            "properties": {
              "WasmerCompileError": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CongestionInfoView": {
        "type": "object",
        "required": [
          "allowed_shard",
          "buffered_receipts_gas",
          "delayed_receipts_gas",
          "receipt_bytes"
        ],
        "properties": {
          "allowed_shard": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "buffered_receipts_gas": {
            "type": "string"
          },
          "delayed_receipts_gas": {
            "type": "string"
          },
          "receipt_bytes": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "CostGasUsed": {
        "type": "object",
        "required": [
          "cost",
          "cost_category",
          "gas_used"
        ],
        "properties": {
          "cost": {
            "type": "string"
          },
          "cost_category": {
            "type": "string"
          },
          "gas_used": {
            "type": "string"
          }
        }
      },
      "CreateAccountAction": {
        "description": "Create account action",
        "type": "object"
      },
      "CryptoHash": {
        "type": "string"
      },
      "CurrentEpochValidatorInfo": {
        "type": "object",
        "required": [
          "account_id",
          "is_slashed",
          "num_expected_blocks",
          "num_produced_blocks",
          "public_key",
          "shards",
          "shards_endorsed",
          "stake"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "is_slashed": {
            "type": "boolean"
          },
          "num_expected_blocks": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_expected_chunks": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_expected_chunks_per_shard": {
            "description": "Number of chunks this validator was expected to produce in each shard. Each entry in the array corresponds to the shard in the `shards_produced` array.",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "num_expected_endorsements": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_expected_endorsements_per_shard": {
            "description": "Number of chunks this validator was expected to validate and endorse in each shard. Each entry in the array corresponds to the shard in the `shards_endorsed` array.",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "num_produced_blocks": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_produced_chunks": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_produced_chunks_per_shard": {
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "num_produced_endorsements": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "num_produced_endorsements_per_shard": {
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "public_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "shards": {
            "description": "Shards this validator is assigned to as chunk producer in the current epoch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            }
          },
          "shards_endorsed": {
            "description": "Shards this validator is assigned to as chunk validator in the current epoch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            }
          },
          "stake": {
            "type": "string"
          }
        }
      },
      "DataReceiverView": {
        "type": "object",
        "required": [
          "data_id",
          "receiver_id"
        ],
        "properties": {
          "data_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "receiver_id": {
            "$ref": "#/components/schemas/AccountId"
          }
        }
      },
      "DelegateAction": {
        "description": "This action allows to execute the inner actions behalf of the defined sender.",
        "type": "object",
        "required": [
          "actions",
          "max_block_height",
          "nonce",
          "public_key",
          "receiver_id",
          "sender_id"
        ],
        "properties": {
          "actions": {
            "description": "List of actions to be executed.\n\nWith the meta transactions MVP defined in NEP-366, nested DelegateActions are not allowed. A separate type is used to enforce it.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonDelegateAction"
            }
          },
          "max_block_height": {
            "description": "The maximal height of the block in the blockchain below which the given DelegateAction is valid.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nonce": {
            "description": "Nonce to ensure that the same delegate action is not sent twice by a relayer and should match for given account's `public_key`. After this action is processed it will increment.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "public_key": {
            "description": "Public key used to sign this delegated action.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ]
          },
          "receiver_id": {
            "description": "Receiver of the delegated actions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "sender_id": {
            "description": "Signer of the delegated actions",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          }
        }
      },
      "DeleteAccountAction": {
        "type": "object",
        "required": [
          "beneficiary_id"
        ],
        "properties": {
          "beneficiary_id": {
            "$ref": "#/components/schemas/AccountId"
          }
        }
      },
      "DeleteKeyAction": {
        "type": "object",
        "required": [
          "public_key"
        ],
        "properties": {
          "public_key": {
            "description": "A public key associated with the access_key to be deleted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ]
          }
        }
      },
      "DeployContractAction": {
        "description": "Deploy contract action",
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "WebAssembly binary",
            "type": "string"
          }
        }
      },
      "DeployGlobalContractAction": {
        "description": "Deploy global contract action",
        "type": "object",
        "required": [
          "code",
          "deploy_mode"
        ],
        "properties": {
          "code": {
            "description": "WebAssembly binary",
            "type": "string"
          },
          "deploy_mode": {
            "$ref": "#/components/schemas/GlobalContractDeployMode"
          }
        }
      },
      "DetailedDebugStatus": {
        "type": "object",
        "required": [
          "block_production_delay_millis",
          "catchup_status",
          "current_head_status",
          "current_header_head_status",
          "network_info",
          "sync_status"
        ],
        "properties": {
          "block_production_delay_millis": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "catchup_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatchupStatusView"
            }
          },
          "current_head_status": {
            "$ref": "#/components/schemas/BlockStatusView"
          },
          "current_header_head_status": {
            "$ref": "#/components/schemas/BlockStatusView"
          },
          "network_info": {
            "$ref": "#/components/schemas/NetworkInfoView"
          },
          "sync_status": {
            "type": "string"
          }
        }
      },
      "Direction": {
        "type": "string",
        "enum": [
          "Left",
          "Right"
        ]
      },
      "DumpConfig": {
        "description": "Configures how to dump state to external storage.",
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "credentials_file": {
            "description": "Location of a json file with credentials allowing write access to the bucket.",
            "type": "string",
            "nullable": true
          },
          "iteration_delay": {
            "description": "How often to check if a new epoch has started. Feel free to set to `None`, defaults are sensible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DurationSchemeProvider"
              }
            ]
          },
          "location": {
            "description": "Specifies where to write the obtained state parts.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalStorageLocation"
              }
            ]
          },
          "restart_dump_for_shards": {
            "description": "Use in case a node that dumps state to the external storage gets in trouble.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            },
            "nullable": true
          }
        }
      },
      "DurationSchemeProvider": {
        "type": "object",
        "required": [
          "nanoseconds",
          "seconds"
        ],
        "properties": {
          "nanoseconds": {
            "type": "integer",
            "format": "int32"
          },
          "seconds": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "EpochId": {
        "description": "Epoch identifier -- wrapped hash, to make it easier to distinguish. EpochId of epoch T is the hash of last block in T-2 EpochId of first two epochs is 0",
        "allOf": [
          {
            "$ref": "#/components/schemas/CryptoHash"
          }
        ]
      },
      "EpochSyncConfig": {
        "type": "object",
        "required": [
          "epoch_sync_horizon",
          "timeout_for_epoch_sync"
        ],
        "properties": {
          "disable_epoch_sync_for_bootstrapping": {
            "description": "If true, even if the node started from genesis, it will not perform epoch sync. There should be no reason to set this flag in production, because on both mainnet and testnet it would be infeasible to catch up from genesis without epoch sync.",
            "default": false,
            "type": "boolean"
          },
          "epoch_sync_horizon": {
            "description": "This serves as two purposes: (1) the node will not epoch sync and instead resort to header sync, if the genesis block is within this many blocks from the current block; (2) the node will reject an epoch sync proof if the provided proof is for an epoch that is more than this many blocks behind the current block.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "ignore_epoch_sync_network_requests": {
            "description": "If true, the node will ignore epoch sync requests from the network. It is strongly recommended not to set this flag, because it will prevent other nodes from bootstrapping. This flag is only included as a kill-switch and may be removed in a future release. Please note that epoch sync requests are heavily rate limited and cached, and therefore should not affect the performance of the node or introduce any non-negligible increase in network traffic.",
            "default": false,
            "type": "boolean"
          },
          "timeout_for_epoch_sync": {
            "description": "Timeout for epoch sync requests. The node will continue retrying indefinitely even if this timeout is exceeded.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DurationSchemeProvider"
              }
            ]
          }
        }
      },
      "ExecutionMetadataView": {
        "type": "object",
        "required": [
          "version"
        ],
        "properties": {
          "gas_profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostGasUsed"
            },
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "ExecutionOutcomeView": {
        "type": "object",
        "required": [
          "executor_id",
          "gas_burnt",
          "logs",
          "receipt_ids",
          "status",
          "tokens_burnt"
        ],
        "properties": {
          "executor_id": {
            "description": "The id of the account on which the execution happens. For transaction this is signer_id, for receipt this is receiver_id.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ]
          },
          "gas_burnt": {
            "description": "The amount of the gas burnt by the given transaction or receipt.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "logs": {
            "description": "Logs from this transaction or receipt.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "description": "Execution metadata, versioned",
            "default": {
              "gas_profile": null,
              "version": 1
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecutionMetadataView"
              }
            ]
          },
          "receipt_ids": {
            "description": "Receipt IDs generated by this transaction or receipt.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptoHash"
            }
          },
          "status": {
            "description": "Execution status. Contains the result in case of successful execution.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecutionStatusView"
              }
            ]
          },
          "tokens_burnt": {
            "description": "The amount of tokens burnt corresponding to the burnt gas amount. This value doesn't always equal to the `gas_burnt` multiplied by the gas price, because the prepaid gas price might be lower than the actual gas price and it creates a deficit.",
            "type": "string"
          }
        }
      },
      "ExecutionOutcomeWithIdView": {
        "type": "object",
        "required": [
          "block_hash",
          "id",
          "outcome",
          "proof"
        ],
        "properties": {
          "block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "outcome": {
            "$ref": "#/components/schemas/ExecutionOutcomeView"
          },
          "proof": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerklePathItem"
            }
          }
        }
      },
      "ExecutionStatusView": {
        "oneOf": [
          {
            "description": "The execution is pending or unknown.",
            "type": "string",
            "enum": [
              "Unknown"
            ]
          },
          {
            "description": "The execution has failed.",
            "type": "object",
            "required": [
              "Failure"
            ],
            "properties": {
              "Failure": {
                "$ref": "#/components/schemas/TxExecutionError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The final action succeeded and returned some value or an empty vec encoded in base64.",
            "type": "object",
            "required": [
              "SuccessValue"
            ],
            "properties": {
              "SuccessValue": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The final action of the receipt returned a promise or the signed transaction was converted to a receipt. Contains the receipt_id of the generated receipt.",
            "type": "object",
            "required": [
              "SuccessReceiptId"
            ],
            "properties": {
              "SuccessReceiptId": {
                "$ref": "#/components/schemas/CryptoHash"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ExternalStorageConfig": {
        "type": "object",
        "required": [
          "location"
        ],
        "properties": {
          "external_storage_fallback_threshold": {
            "description": "The number of attempts the node will make to obtain a part from peers in the network before it fetches from external storage.",
            "default": 3,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "location": {
            "description": "Location of state parts.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalStorageLocation"
              }
            ]
          },
          "num_concurrent_requests": {
            "description": "When fetching state parts from external storage, throttle fetch requests to this many concurrent requests.",
            "default": 25,
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "num_concurrent_requests_during_catchup": {
            "description": "During catchup, the node will use a different number of concurrent requests to reduce the performance impact of state sync.",
            "default": 5,
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "ExternalStorageLocation": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "S3"
            ],
            "properties": {
              "S3": {
                "type": "object",
                "required": [
                  "bucket",
                  "region"
                ],
                "properties": {
                  "bucket": {
                    "description": "Location of state dumps on S3.",
                    "type": "string"
                  },
                  "region": {
                    "description": "Data may only be available in certain locations.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Filesystem"
            ],
            "properties": {
              "Filesystem": {
                "type": "object",
                "required": [
                  "root_dir"
                ],
                "properties": {
                  "root_dir": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "GCS"
            ],
            "properties": {
              "GCS": {
                "type": "object",
                "required": [
                  "bucket"
                ],
                "properties": {
                  "bucket": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FinalExecutionOutcomeView": {
        "description": "Execution outcome of the transaction and all the subsequent receipts. Could be not finalized yet",
        "type": "object",
        "required": [
          "receipts_outcome",
          "status",
          "transaction",
          "transaction_outcome"
        ],
        "properties": {
          "receipts_outcome": {
            "description": "The execution outcome of receipts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionOutcomeWithIdView"
            }
          },
          "status": {
            "description": "Execution status defined by chain.rs:get_final_transaction_result FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution FinalExecutionStatus::Failure - the result of the first leaf receipt_id FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id",
            "allOf": [
              {
                "$ref": "#/components/schemas/FinalExecutionStatus"
              }
            ]
          },
          "transaction": {
            "description": "Signed Transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedTransactionView"
              }
            ]
          },
          "transaction_outcome": {
            "description": "The execution outcome of the signed transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecutionOutcomeWithIdView"
              }
            ]
          }
        }
      },
      "FinalExecutionOutcomeWithReceiptView": {
        "description": "Final execution outcome of the transaction and all of subsequent the receipts. Also includes the generated receipt.",
        "type": "object",
        "required": [
          "receipts",
          "receipts_outcome",
          "status",
          "transaction",
          "transaction_outcome"
        ],
        "properties": {
          "receipts": {
            "description": "Receipts generated from the transaction",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptView"
            }
          },
          "receipts_outcome": {
            "description": "The execution outcome of receipts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExecutionOutcomeWithIdView"
            }
          },
          "status": {
            "description": "Execution status defined by chain.rs:get_final_transaction_result FinalExecutionStatus::NotStarted - the tx is not converted to the receipt yet FinalExecutionStatus::Started - we have at least 1 receipt, but the first leaf receipt_id (using dfs) hasn't finished the execution FinalExecutionStatus::Failure - the result of the first leaf receipt_id FinalExecutionStatus::SuccessValue - the result of the first leaf receipt_id",
            "allOf": [
              {
                "$ref": "#/components/schemas/FinalExecutionStatus"
              }
            ]
          },
          "transaction": {
            "description": "Signed Transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/SignedTransactionView"
              }
            ]
          },
          "transaction_outcome": {
            "description": "The execution outcome of the signed transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExecutionOutcomeWithIdView"
              }
            ]
          }
        }
      },
      "FinalExecutionStatus": {
        "oneOf": [
          {
            "description": "The execution has not yet started.",
            "type": "string",
            "enum": [
              "NotStarted"
            ]
          },
          {
            "description": "The execution has started and still going.",
            "type": "string",
            "enum": [
              "Started"
            ]
          },
          {
            "description": "The execution has failed with the given error.",
            "type": "object",
            "required": [
              "Failure"
            ],
            "properties": {
              "Failure": {
                "$ref": "#/components/schemas/TxExecutionError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The execution has succeeded and returned some value or an empty vec encoded in base64.",
            "type": "object",
            "required": [
              "SuccessValue"
            ],
            "properties": {
              "SuccessValue": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Finality": {
        "description": "Different types of finality.",
        "type": "string",
        "enum": [
          "optimistic",
          "near-final",
          "final"
        ]
      },
      "FunctionCallAction": {
        "type": "object",
        "required": [
          "args",
          "deposit",
          "gas",
          "method_name"
        ],
        "properties": {
          "args": {
            "type": "string"
          },
          "deposit": {
            "type": "string"
          },
          "gas": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "method_name": {
            "type": "string"
          }
        }
      },
      "FunctionCallError": {
        "description": "Serializable version of `near-vm-runner::FunctionCallError`.\n\nMust never reorder/remove elements, can only add new variants at the end (but do that very carefully). It describes stable serialization format, and only used by serialization logic.",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "WasmUnknownError",
              "_EVMError"
            ]
          },
          {
            "description": "Wasm compilation error",
            "type": "object",
            "required": [
              "CompilationError"
            ],
            "properties": {
              "CompilationError": {
                "$ref": "#/components/schemas/CompilationError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Wasm binary env link error\n\nNote: this is only to deserialize old data, use execution error for new data",
            "type": "object",
            "required": [
              "LinkError"
            ],
            "properties": {
              "LinkError": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Import/export resolve error",
            "type": "object",
            "required": [
              "MethodResolveError"
            ],
            "properties": {
              "MethodResolveError": {
                "$ref": "#/components/schemas/MethodResolveError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A trap happened during execution of a binary\n\nNote: this is only to deserialize old data, use execution error for new data",
            "type": "object",
            "required": [
              "WasmTrap"
            ],
            "properties": {
              "WasmTrap": {
                "$ref": "#/components/schemas/WasmTrap"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Note: this is only to deserialize old data, use execution error for new data",
            "type": "object",
            "required": [
              "HostError"
            ],
            "properties": {
              "HostError": {
                "$ref": "#/components/schemas/HostError"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ExecutionError"
            ],
            "properties": {
              "ExecutionError": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FunctionCallPermission": {
        "description": "Grants limited permission to make transactions with FunctionCallActions The permission can limit the allowed balance to be spent on the prepaid gas. It also restrict the account ID of the receiver for this function call. It also can restrict the method name for the allowed function calls.",
        "type": "object",
        "required": [
          "allowance",
          "method_names",
          "receiver_id"
        ],
        "properties": {
          "allowance": {
            "description": "Allowance is a balance limit to use by this access key to pay for function call gas and transaction fees. When this access key is used, both account balance and the allowance is decreased by the same value. `None` means unlimited allowance. NOTE: To change or increase the allowance, the old access key needs to be deleted and a new access key should be created.",
            "type": "string"
          },
          "method_names": {
            "description": "A list of method names that can be used. The access key only allows transactions with the function call of one of the given method names. Empty list means any method name can be used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "receiver_id": {
            "description": "The access key only allows transactions with the given receiver's account id.",
            "type": "string"
          }
        }
      },
      "GCConfig": {
        "description": "Configuration for garbage collection.",
        "type": "object",
        "properties": {
          "gc_blocks_limit": {
            "description": "Maximum number of blocks to garbage collect at every garbage collection call.",
            "default": 2,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gc_fork_clean_step": {
            "description": "Maximum number of height to go through at each garbage collection step when cleaning forks during garbage collection.",
            "default": 100,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gc_num_epochs_to_keep": {
            "description": "Number of epochs for which we keep store data.",
            "default": 5,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gc_step_period": {
            "description": "How often gc should be run",
            "default": {
              "nanoseconds": 0,
              "seconds": 1
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/DurationSchemeProvider"
              }
            ]
          }
        }
      },
      "GasPriceMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "gas_price"
        ]
      },
      "GlobalContractData": {
        "type": "object",
        "required": [
          "code",
          "id"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/GlobalContractIdentifier"
          }
        }
      },
      "GlobalContractDeployMode": {
        "oneOf": [
          {
            "description": "Contract is deployed under its code hash. Users will be able reference it by that hash. This effectively makes the contract immutable.",
            "type": "string",
            "enum": [
              "CodeHash"
            ]
          },
          {
            "description": "Contract is deployed under the owner account id. Users will be able reference it by that account id. This allows the owner to update the contract for all its users.",
            "type": "string",
            "enum": [
              "AccountId"
            ]
          }
        ]
      },
      "GlobalContractIdentifier": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "CodeHash"
            ],
            "properties": {
              "CodeHash": {
                "$ref": "#/components/schemas/CryptoHash"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "AccountId"
            ],
            "properties": {
              "AccountId": {
                "$ref": "#/components/schemas/AccountId"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HealthMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "health"
        ]
      },
      "HostError": {
        "oneOf": [
          {
            "description": "String encoding is bad UTF-16 sequence",
            "type": "string",
            "enum": [
              "BadUTF16"
            ]
          },
          {
            "description": "String encoding is bad UTF-8 sequence",
            "type": "string",
            "enum": [
              "BadUTF8"
            ]
          },
          {
            "description": "Exceeded the prepaid gas",
            "type": "string",
            "enum": [
              "GasExceeded"
            ]
          },
          {
            "description": "Exceeded the maximum amount of gas allowed to burn per contract",
            "type": "string",
            "enum": [
              "GasLimitExceeded"
            ]
          },
          {
            "description": "Exceeded the account balance",
            "type": "string",
            "enum": [
              "BalanceExceeded"
            ]
          },
          {
            "description": "Tried to call an empty method name",
            "type": "string",
            "enum": [
              "EmptyMethodName"
            ]
          },
          {
            "description": "Smart contract panicked",
            "type": "object",
            "required": [
              "GuestPanic"
            ],
            "properties": {
              "GuestPanic": {
                "type": "object",
                "required": [
                  "panic_msg"
                ],
                "properties": {
                  "panic_msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "IntegerOverflow happened during a contract execution",
            "type": "string",
            "enum": [
              "IntegerOverflow"
            ]
          },
          {
            "description": "`promise_idx` does not correspond to existing promises",
            "type": "object",
            "required": [
              "InvalidPromiseIndex"
            ],
            "properties": {
              "InvalidPromiseIndex": {
                "type": "object",
                "required": [
                  "promise_idx"
                ],
                "properties": {
                  "promise_idx": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Actions can only be appended to non-joint promise.",
            "type": "string",
            "enum": [
              "CannotAppendActionToJointPromise"
            ]
          },
          {
            "description": "Returning joint promise is currently prohibited",
            "type": "string",
            "enum": [
              "CannotReturnJointPromise"
            ]
          },
          {
            "description": "Accessed invalid promise result index",
            "type": "object",
            "required": [
              "InvalidPromiseResultIndex"
            ],
            "properties": {
              "InvalidPromiseResultIndex": {
                "type": "object",
                "required": [
                  "result_idx"
                ],
                "properties": {
                  "result_idx": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accessed invalid register id",
            "type": "object",
            "required": [
              "InvalidRegisterId"
            ],
            "properties": {
              "InvalidRegisterId": {
                "type": "object",
                "required": [
                  "register_id"
                ],
                "properties": {
                  "register_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Iterator `iterator_index` was invalidated after its creation by performing a mutable operation on trie",
            "type": "object",
            "required": [
              "IteratorWasInvalidated"
            ],
            "properties": {
              "IteratorWasInvalidated": {
                "type": "object",
                "required": [
                  "iterator_index"
                ],
                "properties": {
                  "iterator_index": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accessed memory outside the bounds",
            "type": "string",
            "enum": [
              "MemoryAccessViolation"
            ]
          },
          {
            "description": "VM Logic returned an invalid receipt index",
            "type": "object",
            "required": [
              "InvalidReceiptIndex"
            ],
            "properties": {
              "InvalidReceiptIndex": {
                "type": "object",
                "required": [
                  "receipt_index"
                ],
                "properties": {
                  "receipt_index": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Iterator index `iterator_index` does not exist",
            "type": "object",
            "required": [
              "InvalidIteratorIndex"
            ],
            "properties": {
              "InvalidIteratorIndex": {
                "type": "object",
                "required": [
                  "iterator_index"
                ],
                "properties": {
                  "iterator_index": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "VM Logic returned an invalid account id",
            "type": "string",
            "enum": [
              "InvalidAccountId"
            ]
          },
          {
            "description": "VM Logic returned an invalid method name",
            "type": "string",
            "enum": [
              "InvalidMethodName"
            ]
          },
          {
            "description": "VM Logic provided an invalid public key",
            "type": "string",
            "enum": [
              "InvalidPublicKey"
            ]
          },
          {
            "description": "`method_name` is not allowed in view calls",
            "type": "object",
            "required": [
              "ProhibitedInView"
            ],
            "properties": {
              "ProhibitedInView": {
                "type": "object",
                "required": [
                  "method_name"
                ],
                "properties": {
                  "method_name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The total number of logs will exceed the limit.",
            "type": "object",
            "required": [
              "NumberOfLogsExceeded"
            ],
            "properties": {
              "NumberOfLogsExceeded": {
                "type": "object",
                "required": [
                  "limit"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The storage key length exceeded the limit.",
            "type": "object",
            "required": [
              "KeyLengthExceeded"
            ],
            "properties": {
              "KeyLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The storage value length exceeded the limit.",
            "type": "object",
            "required": [
              "ValueLengthExceeded"
            ],
            "properties": {
              "ValueLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The total log length exceeded the limit.",
            "type": "object",
            "required": [
              "TotalLogLengthExceeded"
            ],
            "properties": {
              "TotalLogLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The maximum number of promises within a FunctionCall exceeded the limit.",
            "type": "object",
            "required": [
              "NumberPromisesExceeded"
            ],
            "properties": {
              "NumberPromisesExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "number_of_promises"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "number_of_promises": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The maximum number of input data dependencies exceeded the limit.",
            "type": "object",
            "required": [
              "NumberInputDataDependenciesExceeded"
            ],
            "properties": {
              "NumberInputDataDependenciesExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "number_of_input_data_dependencies"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "number_of_input_data_dependencies": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The returned value length exceeded the limit.",
            "type": "object",
            "required": [
              "ReturnedValueLengthExceeded"
            ],
            "properties": {
              "ReturnedValueLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The contract size for DeployContract action exceeded the limit.",
            "type": "object",
            "required": [
              "ContractSizeExceeded"
            ],
            "properties": {
              "ContractSizeExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "size"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "size": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The host function was deprecated.",
            "type": "object",
            "required": [
              "Deprecated"
            ],
            "properties": {
              "Deprecated": {
                "type": "object",
                "required": [
                  "method_name"
                ],
                "properties": {
                  "method_name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "General errors for ECDSA recover.",
            "type": "object",
            "required": [
              "ECRecoverError"
            ],
            "properties": {
              "ECRecoverError": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Invalid input to alt_bn128 family of functions (e.g., point which isn't on the curve).",
            "type": "object",
            "required": [
              "AltBn128InvalidInput"
            ],
            "properties": {
              "AltBn128InvalidInput": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Invalid input to ed25519 signature verification function (e.g. signature cannot be derived from bytes).",
            "type": "object",
            "required": [
              "Ed25519VerifyInvalidInput"
            ],
            "properties": {
              "Ed25519VerifyInvalidInput": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InvalidAccessKeyError": {
        "oneOf": [
          {
            "description": "The access key identified by the `public_key` doesn't exist for the account",
            "type": "object",
            "required": [
              "AccessKeyNotFound"
            ],
            "properties": {
              "AccessKeyNotFound": {
                "type": "object",
                "required": [
                  "account_id",
                  "public_key"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction `receiver_id` doesn't match the access key receiver_id",
            "type": "object",
            "required": [
              "ReceiverMismatch"
            ],
            "properties": {
              "ReceiverMismatch": {
                "type": "object",
                "required": [
                  "ak_receiver",
                  "tx_receiver"
                ],
                "properties": {
                  "ak_receiver": {
                    "type": "string"
                  },
                  "tx_receiver": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction method name isn't allowed by the access key",
            "type": "object",
            "required": [
              "MethodNameMismatch"
            ],
            "properties": {
              "MethodNameMismatch": {
                "type": "object",
                "required": [
                  "method_name"
                ],
                "properties": {
                  "method_name": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction requires a full permission access key.",
            "type": "string",
            "enum": [
              "RequiresFullAccess"
            ]
          },
          {
            "description": "Access Key does not have enough allowance to cover transaction cost",
            "type": "object",
            "required": [
              "NotEnoughAllowance"
            ],
            "properties": {
              "NotEnoughAllowance": {
                "type": "object",
                "required": [
                  "account_id",
                  "allowance",
                  "cost",
                  "public_key"
                ],
                "properties": {
                  "account_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "allowance": {
                    "type": "string"
                  },
                  "cost": {
                    "type": "string"
                  },
                  "public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Having a deposit with a function call action is not allowed with a function call access key.",
            "type": "string",
            "enum": [
              "DepositWithFunctionCall"
            ]
          }
        ]
      },
      "InvalidTxError": {
        "description": "An error happened during TX execution",
        "oneOf": [
          {
            "description": "Happens if a wrong AccessKey used or AccessKey has not enough permissions",
            "type": "object",
            "required": [
              "InvalidAccessKeyError"
            ],
            "properties": {
              "InvalidAccessKeyError": {
                "$ref": "#/components/schemas/InvalidAccessKeyError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "TX signer_id is not a valid [`AccountId`]",
            "type": "object",
            "required": [
              "InvalidSignerId"
            ],
            "properties": {
              "InvalidSignerId": {
                "type": "object",
                "required": [
                  "signer_id"
                ],
                "properties": {
                  "signer_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "TX signer_id is not found in a storage",
            "type": "object",
            "required": [
              "SignerDoesNotExist"
            ],
            "properties": {
              "SignerDoesNotExist": {
                "type": "object",
                "required": [
                  "signer_id"
                ],
                "properties": {
                  "signer_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction nonce must be `account[access_key].nonce + 1`.",
            "type": "object",
            "required": [
              "InvalidNonce"
            ],
            "properties": {
              "InvalidNonce": {
                "type": "object",
                "required": [
                  "ak_nonce",
                  "tx_nonce"
                ],
                "properties": {
                  "ak_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "tx_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction nonce is larger than the upper bound given by the block height",
            "type": "object",
            "required": [
              "NonceTooLarge"
            ],
            "properties": {
              "NonceTooLarge": {
                "type": "object",
                "required": [
                  "tx_nonce",
                  "upper_bound"
                ],
                "properties": {
                  "tx_nonce": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "upper_bound": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "TX receiver_id is not a valid AccountId",
            "type": "object",
            "required": [
              "InvalidReceiverId"
            ],
            "properties": {
              "InvalidReceiverId": {
                "type": "object",
                "required": [
                  "receiver_id"
                ],
                "properties": {
                  "receiver_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "TX signature is not valid",
            "type": "string",
            "enum": [
              "InvalidSignature"
            ]
          },
          {
            "description": "Account does not have enough balance to cover TX cost",
            "type": "object",
            "required": [
              "NotEnoughBalance"
            ],
            "properties": {
              "NotEnoughBalance": {
                "type": "object",
                "required": [
                  "balance",
                  "cost",
                  "signer_id"
                ],
                "properties": {
                  "balance": {
                    "type": "string"
                  },
                  "cost": {
                    "type": "string"
                  },
                  "signer_id": {
                    "$ref": "#/components/schemas/AccountId"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Signer account doesn't have enough balance after transaction.",
            "type": "object",
            "required": [
              "LackBalanceForState"
            ],
            "properties": {
              "LackBalanceForState": {
                "type": "object",
                "required": [
                  "amount",
                  "signer_id"
                ],
                "properties": {
                  "amount": {
                    "description": "Required balance to cover the state.",
                    "type": "string"
                  },
                  "signer_id": {
                    "description": "An account which doesn't have enough balance to cover storage.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AccountId"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An integer overflow occurred during transaction cost estimation.",
            "type": "string",
            "enum": [
              "CostOverflow"
            ]
          },
          {
            "description": "Transaction parent block hash doesn't belong to the current chain",
            "type": "string",
            "enum": [
              "InvalidChain"
            ]
          },
          {
            "description": "Transaction has expired",
            "type": "string",
            "enum": [
              "Expired"
            ]
          },
          {
            "description": "An error occurred while validating actions of a Transaction.",
            "type": "object",
            "required": [
              "ActionsValidation"
            ],
            "properties": {
              "ActionsValidation": {
                "$ref": "#/components/schemas/ActionsValidationError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The size of serialized transaction exceeded the limit.",
            "type": "object",
            "required": [
              "TransactionSizeExceeded"
            ],
            "properties": {
              "TransactionSizeExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "size"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "size": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Transaction version is invalid.",
            "type": "string",
            "enum": [
              "InvalidTransactionVersion"
            ]
          },
          {
            "type": "object",
            "required": [
              "StorageError"
            ],
            "properties": {
              "StorageError": {
                "$ref": "#/components/schemas/StorageError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The receiver shard of the transaction is too congested to accept new transactions at the moment.",
            "type": "object",
            "required": [
              "ShardCongested"
            ],
            "properties": {
              "ShardCongested": {
                "type": "object",
                "required": [
                  "congestion_level",
                  "shard_id"
                ],
                "properties": {
                  "congestion_level": {
                    "description": "A value between 0 (no congestion) and 1 (max congestion).",
                    "type": "number",
                    "format": "double"
                  },
                  "shard_id": {
                    "description": "The congested shard.",
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The receiver shard of the transaction missed several chunks and rejects new transaction until it can make progress again.",
            "type": "object",
            "required": [
              "ShardStuck"
            ],
            "properties": {
              "ShardStuck": {
                "type": "object",
                "required": [
                  "missed_chunks",
                  "shard_id"
                ],
                "properties": {
                  "missed_chunks": {
                    "description": "The number of blocks since the last included chunk of the shard.",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "shard_id": {
                    "description": "The shard that fails making progress.",
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "JsonRpcRequest_for_BlockMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_BlockMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/BlockMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcBlockRequest"
          }
        }
      },
      "JsonRpcRequest_for_BroadCastTxAsyncMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_BroadCastTxAsyncMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/BroadCastTxAsyncMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcSendTransactionRequest"
          }
        }
      },
      "JsonRpcRequest_for_BroadCastTxCommitMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_BroadCastTxCommitMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/BroadCastTxCommitMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcSendTransactionRequest"
          }
        }
      },
      "JsonRpcRequest_for_ClientConfigMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_ClientConfigMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/ClientConfigMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcClientConfigRequest"
          }
        }
      },
      "JsonRpcRequest_for_GasPriceMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_GasPriceMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/GasPriceMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcGasPriceRequest"
          }
        }
      },
      "JsonRpcRequest_for_HealthMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_HealthMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/HealthMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcHealthRequest"
          }
        }
      },
      "JsonRpcRequest_for_LightClientProofMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_LightClientProofMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/LightClientProofMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcLightClientExecutionProofRequest"
          }
        }
      },
      "JsonRpcRequest_for_NetworkInfoMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_NetworkInfoMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/NetworkInfoMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcNetworkInfoRequest"
          }
        }
      },
      "JsonRpcRequest_for_NextLightClientBlockMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_NextLightClientBlockMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/NextLightClientBlockMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcLightClientNextBlockRequest"
          }
        }
      },
      "JsonRpcRequest_for_SendTxMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_SendTxMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/SendTxMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcSendTransactionRequest"
          }
        }
      },
      "JsonRpcRequest_for_StatusMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_StatusMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/StatusMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcStatusRequest"
          }
        }
      },
      "JsonRpcRequest_for_TxMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_TxMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/TxMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcTransactionStatusRequest"
          }
        }
      },
      "JsonRpcRequest_for_ValidatorsMethodNameHelperEnum": {
        "title": "JsonRpcRequest_for_ValidatorsMethodNameHelperEnum",
        "type": "object",
        "required": [
          "id",
          "jsonrpc",
          "method",
          "params"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/ValidatorsMethodNameHelperEnum"
          },
          "params": {
            "$ref": "#/components/schemas/RpcValidatorRequest"
          }
        }
      },
      "JsonRpcResponse_for_RpcBlockResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcBlockResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcBlockResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcClientConfigResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcClientConfigResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcGasPriceResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcGasPriceResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcHealthResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcHealthResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcHealthResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcLightClientExecutionProofResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcLightClientExecutionProofResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcLightClientNextBlockResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcLightClientNextBlockResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcNetworkInfoResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcNetworkInfoResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcStatusResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcStatusResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcStatusResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcTransactionResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcTransactionResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcTransactionResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "JsonRpcResponse_for_RpcValidatorResponse_and_RpcError": {
        "title": "JsonRpcResponse_for_RpcValidatorResponse_and_RpcError",
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "$ref": "#/components/schemas/RpcValidatorResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "tmp"
            ],
            "properties": {
              "tmp": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "$ref": "#/components/schemas/RpcError"
              }
            }
          }
        ],
        "required": [
          "id",
          "jsonrpc"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "jsonrpc": {
            "type": "string"
          }
        }
      },
      "KnownProducerView": {
        "description": "Information about a Producer: its account name, peer_id and a list of connected peers that the node can use to send message for this producer.",
        "type": "object",
        "required": [
          "account_id",
          "peer_id"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "next_hops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            },
            "nullable": true
          },
          "peer_id": {
            "$ref": "#/components/schemas/PublicKey"
          }
        }
      },
      "LightClientBlockLiteView": {
        "type": "object",
        "required": [
          "inner_lite",
          "inner_rest_hash",
          "prev_block_hash"
        ],
        "properties": {
          "inner_lite": {
            "$ref": "#/components/schemas/BlockHeaderInnerLiteView"
          },
          "inner_rest_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "prev_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "LightClientProofMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "light_client_proof"
        ]
      },
      "LogSummaryStyle": {
        "type": "string",
        "enum": [
          "plain",
          "colored"
        ]
      },
      "MerklePathItem": {
        "type": "object",
        "required": [
          "direction",
          "hash"
        ],
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "hash": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "MethodResolveError": {
        "type": "string",
        "enum": [
          "MethodEmptyName",
          "MethodNotFound",
          "MethodInvalidSignature"
        ]
      },
      "MissingTrieValue": {
        "type": "object",
        "required": [
          "context",
          "hash"
        ],
        "properties": {
          "context": {
            "$ref": "#/components/schemas/MissingTrieValueContext"
          },
          "hash": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "MissingTrieValueContext": {
        "description": "Contexts in which `StorageError::MissingTrieValue` error might occur.",
        "oneOf": [
          {
            "description": "Missing trie value when reading from TrieIterator.",
            "type": "string",
            "enum": [
              "TrieIterator"
            ]
          },
          {
            "description": "Missing trie value when reading from TriePrefetchingStorage.",
            "type": "string",
            "enum": [
              "TriePrefetchingStorage"
            ]
          },
          {
            "description": "Missing trie value when reading from TrieMemoryPartialStorage.",
            "type": "string",
            "enum": [
              "TrieMemoryPartialStorage"
            ]
          },
          {
            "description": "Missing trie value when reading from TrieStorage.",
            "type": "string",
            "enum": [
              "TrieStorage"
            ]
          }
        ]
      },
      "MutableConfigValue": {
        "type": "string"
      },
      "NameRpcErrorKind": {
        "type": "string",
        "enum": [
          "REQUEST_VALIDATION_ERROR",
          "HANDLER_ERROR",
          "INTERNAL_ERROR"
        ]
      },
      "NetworkInfoMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "network_info"
        ]
      },
      "NetworkInfoView": {
        "type": "object",
        "required": [
          "connected_peers",
          "known_producers",
          "num_connected_peers",
          "peer_max_count",
          "tier1_accounts_data",
          "tier1_accounts_keys",
          "tier1_connections"
        ],
        "properties": {
          "connected_peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeerInfoView"
            }
          },
          "known_producers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KnownProducerView"
            }
          },
          "num_connected_peers": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "peer_max_count": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "tier1_accounts_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDataView"
            }
          },
          "tier1_accounts_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            }
          },
          "tier1_connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeerInfoView"
            }
          }
        }
      },
      "NextEpochValidatorInfo": {
        "type": "object",
        "required": [
          "account_id",
          "public_key",
          "shards",
          "stake"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "public_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "shards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            }
          },
          "stake": {
            "type": "string"
          }
        }
      },
      "NextLightClientBlockMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "next_light_client_block"
        ]
      },
      "NonDelegateAction": {
        "description": "This is Action which mustn't contain DelegateAction.\n\nThis struct is needed to avoid the recursion when Action/DelegateAction is deserialized.\n\nImportant: Don't make the inner Action public, this must only be constructed through the correct interface that ensures the inner Action is actually not a delegate action. That would break an assumption of this type, which we use in several places. For example, borsh de-/serialization relies on it. If the invariant is broken, we may end up with a `Transaction` or `Receipt` that we can serialize but deserializing it back causes a parsing error.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Action"
          }
        ]
      },
      "PeerId": {
        "description": "Peer id is the public key.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicKey"
          }
        ]
      },
      "PeerInfoView": {
        "type": "object",
        "required": [
          "addr",
          "archival",
          "connection_established_time_millis",
          "is_highest_block_invalid",
          "is_outbound_peer",
          "last_time_peer_requested_millis",
          "last_time_received_message_millis",
          "nonce",
          "peer_id",
          "received_bytes_per_sec",
          "sent_bytes_per_sec",
          "tracked_shards"
        ],
        "properties": {
          "account_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ],
            "nullable": true
          },
          "addr": {
            "type": "string"
          },
          "archival": {
            "type": "boolean"
          },
          "block_hash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptoHash"
              }
            ],
            "nullable": true
          },
          "connection_established_time_millis": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "is_highest_block_invalid": {
            "type": "boolean"
          },
          "is_outbound_peer": {
            "type": "boolean"
          },
          "last_time_peer_requested_millis": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "last_time_received_message_millis": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nonce": {
            "description": "Connection nonce.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "peer_id": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "received_bytes_per_sec": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "sent_bytes_per_sec": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "tracked_shards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            }
          }
        }
      },
      "PrepareError": {
        "description": "Error that can occur while preparing or executing Wasm smart-contract.",
        "oneOf": [
          {
            "description": "Error happened while serializing the module.",
            "type": "string",
            "enum": [
              "Serialization"
            ]
          },
          {
            "description": "Error happened while deserializing the module.",
            "type": "string",
            "enum": [
              "Deserialization"
            ]
          },
          {
            "description": "Internal memory declaration has been found in the module.",
            "type": "string",
            "enum": [
              "InternalMemoryDeclared"
            ]
          },
          {
            "description": "Gas instrumentation failed.\n\nThis most likely indicates the module isn't valid.",
            "type": "string",
            "enum": [
              "GasInstrumentation"
            ]
          },
          {
            "description": "Stack instrumentation failed.\n\nThis  most likely indicates the module isn't valid.",
            "type": "string",
            "enum": [
              "StackHeightInstrumentation"
            ]
          },
          {
            "description": "Error happened during instantiation.\n\nThis might indicate that `start` function trapped, or module isn't instantiable and/or un-linkable.",
            "type": "string",
            "enum": [
              "Instantiate"
            ]
          },
          {
            "description": "Error creating memory.",
            "type": "string",
            "enum": [
              "Memory"
            ]
          },
          {
            "description": "Contract contains too many functions.",
            "type": "string",
            "enum": [
              "TooManyFunctions"
            ]
          },
          {
            "description": "Contract contains too many locals.",
            "type": "string",
            "enum": [
              "TooManyLocals"
            ]
          }
        ]
      },
      "PublicKey": {
        "type": "string"
      },
      "ReceiptEnumView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Action"
            ],
            "properties": {
              "Action": {
                "type": "object",
                "required": [
                  "actions",
                  "gas_price",
                  "input_data_ids",
                  "output_data_receivers",
                  "signer_id",
                  "signer_public_key"
                ],
                "properties": {
                  "actions": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ActionView"
                    }
                  },
                  "gas_price": {
                    "type": "string"
                  },
                  "input_data_ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CryptoHash"
                    }
                  },
                  "is_promise_yield": {
                    "default": false,
                    "type": "boolean"
                  },
                  "output_data_receivers": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DataReceiverView"
                    }
                  },
                  "signer_id": {
                    "$ref": "#/components/schemas/AccountId"
                  },
                  "signer_public_key": {
                    "$ref": "#/components/schemas/PublicKey"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Data"
            ],
            "properties": {
              "Data": {
                "type": "object",
                "required": [
                  "data_id"
                ],
                "properties": {
                  "data": {
                    "default": null,
                    "type": "string",
                    "nullable": true
                  },
                  "data_id": {
                    "$ref": "#/components/schemas/CryptoHash"
                  },
                  "is_promise_resume": {
                    "default": false,
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "GlobalContractDistribution"
            ],
            "properties": {
              "GlobalContractDistribution": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/GlobalContractData"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ReceiptValidationError": {
        "description": "Describes the error for validating a receipt.",
        "oneOf": [
          {
            "description": "The `predecessor_id` of a Receipt is not valid.",
            "type": "object",
            "required": [
              "InvalidPredecessorId"
            ],
            "properties": {
              "InvalidPredecessorId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The `receiver_id` of a Receipt is not valid.",
            "type": "object",
            "required": [
              "InvalidReceiverId"
            ],
            "properties": {
              "InvalidReceiverId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The `signer_id` of an ActionReceipt is not valid.",
            "type": "object",
            "required": [
              "InvalidSignerId"
            ],
            "properties": {
              "InvalidSignerId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The `receiver_id` of a DataReceiver within an ActionReceipt is not valid.",
            "type": "object",
            "required": [
              "InvalidDataReceiverId"
            ],
            "properties": {
              "InvalidDataReceiverId": {
                "type": "object",
                "required": [
                  "account_id"
                ],
                "properties": {
                  "account_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The length of the returned data exceeded the limit in a DataReceipt.",
            "type": "object",
            "required": [
              "ReturnedValueLengthExceeded"
            ],
            "properties": {
              "ReturnedValueLengthExceeded": {
                "type": "object",
                "required": [
                  "length",
                  "limit"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The number of input data dependencies exceeds the limit in an ActionReceipt.",
            "type": "object",
            "required": [
              "NumberInputDataDependenciesExceeded"
            ],
            "properties": {
              "NumberInputDataDependenciesExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "number_of_input_data_dependencies"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "number_of_input_data_dependencies": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error occurred while validating actions of an ActionReceipt.",
            "type": "object",
            "required": [
              "ActionsValidation"
            ],
            "properties": {
              "ActionsValidation": {
                "$ref": "#/components/schemas/ActionsValidationError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Receipt is bigger than the limit.",
            "type": "object",
            "required": [
              "ReceiptSizeExceeded"
            ],
            "properties": {
              "ReceiptSizeExceeded": {
                "type": "object",
                "required": [
                  "limit",
                  "size"
                ],
                "properties": {
                  "limit": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "size": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ReceiptView": {
        "type": "object",
        "required": [
          "predecessor_id",
          "receipt",
          "receipt_id",
          "receiver_id"
        ],
        "properties": {
          "predecessor_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "priority": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "receipt": {
            "$ref": "#/components/schemas/ReceiptEnumView"
          },
          "receipt_id": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "receiver_id": {
            "$ref": "#/components/schemas/AccountId"
          }
        }
      },
      "RpcBlockRequest": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "block_id"
            ],
            "properties": {
              "block_id": {
                "$ref": "#/components/schemas/BlockId"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "finality"
            ],
            "properties": {
              "finality": {
                "$ref": "#/components/schemas/Finality"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "sync_checkpoint"
            ],
            "properties": {
              "sync_checkpoint": {
                "$ref": "#/components/schemas/SyncCheckpoint"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RpcBlockResponse": {
        "type": "object",
        "required": [
          "author",
          "chunks",
          "header"
        ],
        "properties": {
          "author": {
            "$ref": "#/components/schemas/AccountId"
          },
          "chunks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChunkHeaderView"
            }
          },
          "header": {
            "$ref": "#/components/schemas/BlockHeaderView"
          }
        }
      },
      "RpcClientConfigRequest": {
        "type": "object"
      },
      "RpcClientConfigResponse": {
        "description": "ClientConfig where some fields can be updated at runtime.",
        "type": "object",
        "required": [
          "archive",
          "block_fetch_horizon",
          "block_header_fetch_horizon",
          "block_production_tracking_delay",
          "catchup_step_period",
          "chain_id",
          "chunk_request_retry_period",
          "client_background_migration_threads",
          "doomslug_step_period",
          "enable_multiline_logging",
          "enable_statistics_export",
          "epoch_length",
          "epoch_sync",
          "expected_shutdown",
          "gc",
          "header_sync_expected_height_per_second",
          "header_sync_initial_timeout",
          "header_sync_progress_timeout",
          "header_sync_stall_ban_timeout",
          "log_summary_period",
          "log_summary_style",
          "max_block_production_delay",
          "max_block_wait_delay",
          "min_block_production_delay",
          "min_num_peers",
          "num_block_producer_seats",
          "orphan_state_witness_max_size",
          "orphan_state_witness_pool_size",
          "produce_chunk_add_transactions_time_limit",
          "produce_empty_blocks",
          "resharding_config",
          "save_latest_witnesses",
          "save_trie_changes",
          "skip_sync_wait",
          "state_sync",
          "state_sync_enabled",
          "state_sync_external_backoff",
          "state_sync_external_timeout",
          "state_sync_p2p_timeout",
          "state_sync_retry_backoff",
          "sync_check_period",
          "sync_height_threshold",
          "sync_max_block_requests",
          "sync_step_period",
          "tracked_accounts",
          "tracked_shard_schedule",
          "tracked_shards",
          "ttl_account_id_router",
          "tx_routing_height_horizon",
          "version",
          "view_client_threads",
          "view_client_throttle_period"
        ],
        "properties": {
          "archive": {
            "description": "Not clear old data, set `true` for archive nodes.",
            "type": "boolean"
          },
          "block_fetch_horizon": {
            "description": "Horizon at which instead of fetching block, fetch full state.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "block_header_fetch_horizon": {
            "description": "Behind this horizon header fetch kicks in.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "block_production_tracking_delay": {
            "description": "Duration to check for producing / skipping block.",
            "type": "string"
          },
          "catchup_step_period": {
            "description": "Time between check to perform catchup.",
            "type": "string"
          },
          "chain_id": {
            "description": "Chain id for status.",
            "type": "string"
          },
          "chunk_distribution_network": {
            "description": "Optional config for the Chunk Distribution Network feature. If set to `None` then this node does not participate in the Chunk Distribution Network. Nodes not participating will still function fine, but possibly with higher latency due to the need of requesting chunks over the peer-to-peer network.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ChunkDistributionNetworkConfig"
              }
            ],
            "nullable": true
          },
          "chunk_request_retry_period": {
            "description": "Time between checking to re-request chunks.",
            "type": "string"
          },
          "client_background_migration_threads": {
            "description": "Number of threads to execute background migration work in client.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "doomslug_step_period": {
            "description": "Time between running doomslug timer.",
            "type": "string"
          },
          "enable_multiline_logging": {
            "type": "boolean"
          },
          "enable_statistics_export": {
            "description": "Re-export storage layer statistics as prometheus metrics.",
            "type": "boolean"
          },
          "epoch_length": {
            "description": "Epoch length.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_sync": {
            "description": "Options for epoch sync.",
            "allOf": [
              {
                "$ref": "#/components/schemas/EpochSyncConfig"
              }
            ]
          },
          "expected_shutdown": {
            "description": "Graceful shutdown at expected block height.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MutableConfigValue"
              }
            ]
          },
          "gc": {
            "description": "Garbage collection configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/GCConfig"
              }
            ]
          },
          "header_sync_expected_height_per_second": {
            "description": "Expected increase of header head height per second during header sync",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "header_sync_initial_timeout": {
            "description": "How much time to wait after initial header sync",
            "type": "string"
          },
          "header_sync_progress_timeout": {
            "description": "How much time to wait after some progress is made in header sync",
            "type": "string"
          },
          "header_sync_stall_ban_timeout": {
            "description": "How much time to wait before banning a peer in header sync if sync is too slow",
            "type": "string"
          },
          "log_summary_period": {
            "description": "Period between logging summary information.",
            "type": "string"
          },
          "log_summary_style": {
            "description": "Enable coloring of the logs",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogSummaryStyle"
              }
            ]
          },
          "max_block_production_delay": {
            "description": "Maximum wait for approvals before producing block.",
            "type": "string"
          },
          "max_block_wait_delay": {
            "description": "Maximum duration before skipping given height.",
            "type": "string"
          },
          "max_gas_burnt_view": {
            "description": "Max burnt gas per view method.  If present, overrides value stored in genesis file.  The value only affects the RPCs without influencing the protocol thus changing it per-node doesn’t affect the blockchain.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "min_block_production_delay": {
            "description": "Minimum duration before producing block.",
            "type": "string"
          },
          "min_num_peers": {
            "description": "Minimum number of peers to start syncing.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "num_block_producer_seats": {
            "description": "Number of block producer seats",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "orphan_state_witness_max_size": {
            "description": "Maximum size of state witnesses in the OrphanStateWitnessPool.\n\nWe keep only orphan witnesses which are smaller than this size. This limits the maximum memory usage of OrphanStateWitnessPool.",
            "type": "string"
          },
          "orphan_state_witness_pool_size": {
            "description": "OrphanStateWitnessPool keeps instances of ChunkStateWitness which can't be processed because the previous block isn't available. The witnesses wait in the pool until the required block appears. This variable controls how many witnesses can be stored in the pool.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "produce_chunk_add_transactions_time_limit": {
            "description": "Limit the time of adding transactions to a chunk. A node produces a chunk by adding transactions from the transaction pool until some limit is reached. This time limit ensures that adding transactions won't take longer than the specified duration, which helps to produce the chunk quickly.",
            "type": "string"
          },
          "produce_empty_blocks": {
            "description": "Produce empty blocks, use `false` for testing.",
            "type": "boolean"
          },
          "resharding_config": {
            "$ref": "#/components/schemas/MutableConfigValue"
          },
          "rpc_addr": {
            "description": "Listening rpc port for status.",
            "type": "string",
            "nullable": true
          },
          "save_latest_witnesses": {
            "description": "Save observed instances of ChunkStateWitness to the database in DBCol::LatestChunkStateWitnesses. Saving the latest witnesses is useful for analysis and debugging. When this option is enabled, the node will save ALL witnesses it observes, even invalid ones, which can cause extra load on the database. This option is not recommended for production use, as a large number of incoming witnesses could cause denial of service.",
            "type": "boolean"
          },
          "save_trie_changes": {
            "description": "save_trie_changes should be set to true iff - archive if false - non-archival nodes need trie changes to perform garbage collection - archive is true, cold_store is configured and migration to split_storage is finished - node working in split storage mode needs trie changes in order to do garbage collection on hot.",
            "type": "boolean"
          },
          "skip_sync_wait": {
            "description": "Skip waiting for sync (for testing or single node testnet).",
            "type": "boolean"
          },
          "state_sync": {
            "description": "Options for syncing state.",
            "allOf": [
              {
                "$ref": "#/components/schemas/StateSyncConfig"
              }
            ]
          },
          "state_sync_enabled": {
            "description": "Whether to use the State Sync mechanism. If disabled, the node will do Block Sync instead of State Sync.",
            "type": "boolean"
          },
          "state_sync_external_backoff": {
            "description": "Additional waiting period after a failed request to external storage",
            "type": "string"
          },
          "state_sync_external_timeout": {
            "description": "How long to wait for a response from centralized state sync",
            "type": "string"
          },
          "state_sync_p2p_timeout": {
            "description": "How long to wait for a response from p2p state sync",
            "type": "string"
          },
          "state_sync_retry_backoff": {
            "description": "How long to wait after a failed state sync request",
            "type": "string"
          },
          "sync_check_period": {
            "description": "How often to check that we are not out of sync.",
            "type": "string"
          },
          "sync_height_threshold": {
            "description": "Sync height threshold: below this difference in height don't start syncing.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "sync_max_block_requests": {
            "description": "Maximum number of block requests to send to peers to sync",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "sync_step_period": {
            "description": "While syncing, how long to check for each step.",
            "type": "string"
          },
          "tracked_accounts": {
            "description": "Accounts that this client tracks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          "tracked_shadow_validator": {
            "description": "Track shards that should be tracked by given validator.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ],
            "nullable": true
          },
          "tracked_shard_schedule": {
            "description": "Rotate between these sets of tracked shards. Used to simulate the behavior of chunk only producers without staking tokens. This field is only used if `tracked_shards` is empty.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ShardId"
              }
            }
          },
          "tracked_shards": {
            "description": "Shards that this client tracks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShardId"
            }
          },
          "transaction_pool_size_limit": {
            "description": "Limit of the size of per-shard transaction pool measured in bytes. If not set, the size will be unbounded.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "trie_viewer_state_size_limit": {
            "description": "Upper bound of the byte size of contract state that is still viewable. None is no limit",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "ttl_account_id_router": {
            "description": "Time to persist Accounts Id in the router without removing them.",
            "type": "string"
          },
          "tx_routing_height_horizon": {
            "description": "If the node is not a chunk producer within that many blocks, then route to upcoming chunk producers.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "version": {
            "description": "Version of the binary.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Version"
              }
            ]
          },
          "view_client_threads": {
            "description": "Number of threads for ViewClientActor pool.",
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "view_client_throttle_period": {
            "description": "Number of seconds between state requests for view client.",
            "type": "string"
          }
        }
      },
      "RpcError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "cause": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CauseRpcErrorKind"
              }
            ],
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NameRpcErrorKind"
              }
            ],
            "nullable": true
          }
        }
      },
      "RpcGasPriceRequest": {
        "type": "object",
        "properties": {
          "block_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockId"
              }
            ],
            "nullable": true
          }
        }
      },
      "RpcGasPriceResponse": {
        "type": "object",
        "required": [
          "gas_price"
        ],
        "properties": {
          "gas_price": {
            "type": "string"
          }
        }
      },
      "RpcHealthRequest": {
        "type": "object"
      },
      "RpcHealthResponse": {
        "type": "object"
      },
      "RpcKnownProducer": {
        "type": "object",
        "required": [
          "account_id",
          "peer_id"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "addr": {
            "type": "string",
            "nullable": true
          },
          "peer_id": {
            "$ref": "#/components/schemas/PeerId"
          }
        }
      },
      "RpcLightClientExecutionProofRequest": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "sender_id",
              "transaction_hash",
              "type"
            ],
            "properties": {
              "sender_id": {
                "$ref": "#/components/schemas/AccountId"
              },
              "transaction_hash": {
                "$ref": "#/components/schemas/CryptoHash"
              },
              "type": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "receipt_id",
              "receiver_id",
              "type"
            ],
            "properties": {
              "receipt_id": {
                "$ref": "#/components/schemas/CryptoHash"
              },
              "receiver_id": {
                "$ref": "#/components/schemas/AccountId"
              },
              "type": {
                "type": "string",
                "enum": [
                  "receipt"
                ]
              }
            }
          }
        ],
        "required": [
          "light_client_head"
        ],
        "properties": {
          "light_client_head": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "RpcLightClientExecutionProofResponse": {
        "type": "object",
        "required": [
          "block_header_lite",
          "block_proof",
          "outcome_proof",
          "outcome_root_proof"
        ],
        "properties": {
          "block_header_lite": {
            "$ref": "#/components/schemas/LightClientBlockLiteView"
          },
          "block_proof": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerklePathItem"
            }
          },
          "outcome_proof": {
            "$ref": "#/components/schemas/ExecutionOutcomeWithIdView"
          },
          "outcome_root_proof": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerklePathItem"
            }
          }
        }
      },
      "RpcLightClientNextBlockRequest": {
        "type": "object",
        "required": [
          "last_block_hash"
        ],
        "properties": {
          "last_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "RpcLightClientNextBlockResponse": {
        "type": "object",
        "properties": {
          "approvals_after_next": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Signature"
                }
              ],
              "nullable": true
            }
          },
          "inner_lite": {
            "$ref": "#/components/schemas/BlockHeaderInnerLiteView"
          },
          "inner_rest_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "next_block_inner_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "next_bps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            },
            "nullable": true
          },
          "prev_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          }
        }
      },
      "RpcNetworkInfoRequest": {
        "type": "object"
      },
      "RpcNetworkInfoResponse": {
        "type": "object",
        "required": [
          "active_peers",
          "known_producers",
          "num_active_peers",
          "peer_max_count",
          "received_bytes_per_sec",
          "sent_bytes_per_sec"
        ],
        "properties": {
          "active_peers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RpcPeerInfo"
            }
          },
          "known_producers": {
            "description": "Accounts of known block and chunk producers from routing table.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RpcKnownProducer"
            }
          },
          "num_active_peers": {
            "type": "integer",
            "format": "uint",
            "minimum": 0.0
          },
          "peer_max_count": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "received_bytes_per_sec": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "sent_bytes_per_sec": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "RpcPeerInfo": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "account_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ],
            "nullable": true
          },
          "addr": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/PeerId"
          }
        }
      },
      "RpcRequestValidationErrorKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "info",
              "name"
            ],
            "properties": {
              "info": {
                "type": "object",
                "required": [
                  "method_name"
                ],
                "properties": {
                  "method_name": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "type": "string",
                "enum": [
                  "METHOD_NOT_FOUND"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "info",
              "name"
            ],
            "properties": {
              "info": {
                "type": "object",
                "required": [
                  "error_message"
                ],
                "properties": {
                  "error_message": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "type": "string",
                "enum": [
                  "PARSE_ERROR"
                ]
              }
            }
          }
        ]
      },
      "RpcSendTransactionRequest": {
        "type": "object",
        "required": [
          "signed_tx_base64"
        ],
        "properties": {
          "signed_tx_base64": {
            "type": "string"
          },
          "wait_until": {
            "default": "EXECUTED_OPTIMISTIC",
            "allOf": [
              {
                "$ref": "#/components/schemas/TxExecutionStatus"
              }
            ]
          }
        }
      },
      "RpcStatusRequest": {
        "type": "object"
      },
      "RpcStatusResponse": {
        "type": "object",
        "required": [
          "chain_id",
          "genesis_hash",
          "latest_protocol_version",
          "node_public_key",
          "protocol_version",
          "sync_info",
          "uptime_sec",
          "validators",
          "version"
        ],
        "properties": {
          "chain_id": {
            "description": "Unique chain id.",
            "type": "string"
          },
          "detailed_debug_status": {
            "description": "Information about last blocks, network, epoch and chain & chunk info.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DetailedDebugStatus"
              }
            ],
            "nullable": true
          },
          "genesis_hash": {
            "description": "Genesis hash of the chain.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptoHash"
              }
            ]
          },
          "latest_protocol_version": {
            "description": "Latest protocol version that this client supports.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "node_key": {
            "description": "Deprecated; same as `validator_public_key` which you should use instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ],
            "nullable": true
          },
          "node_public_key": {
            "description": "Public key of the node.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ]
          },
          "protocol_version": {
            "description": "Currently active protocol version.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "rpc_addr": {
            "description": "Address for RPC server.  None if node doesn’t have RPC endpoint enabled.",
            "type": "string",
            "nullable": true
          },
          "sync_info": {
            "description": "Sync status of the node.",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusSyncInfo"
              }
            ]
          },
          "uptime_sec": {
            "description": "Uptime of the node.",
            "type": "integer",
            "format": "int64"
          },
          "validator_account_id": {
            "description": "Validator id of the node",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountId"
              }
            ],
            "nullable": true
          },
          "validator_public_key": {
            "description": "Public key of the validator.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ],
            "nullable": true
          },
          "validators": {
            "description": "Current epoch validators.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorInfo"
            }
          },
          "version": {
            "description": "Binary version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Version"
              }
            ]
          }
        }
      },
      "RpcTransactionResponse": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/FinalExecutionOutcomeWithReceiptView"
          },
          {
            "$ref": "#/components/schemas/FinalExecutionOutcomeView"
          }
        ],
        "required": [
          "final_execution_status"
        ],
        "properties": {
          "final_execution_status": {
            "$ref": "#/components/schemas/TxExecutionStatus"
          }
        }
      },
      "RpcTransactionStatusRequest": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/components/schemas/SignedTransaction"
          },
          {
            "type": "object",
            "required": [
              "sender_account_id",
              "tx_hash"
            ],
            "properties": {
              "sender_account_id": {
                "$ref": "#/components/schemas/AccountId"
              },
              "tx_hash": {
                "$ref": "#/components/schemas/CryptoHash"
              }
            }
          }
        ],
        "properties": {
          "wait_until": {
            "default": "EXECUTED_OPTIMISTIC",
            "allOf": [
              {
                "$ref": "#/components/schemas/TxExecutionStatus"
              }
            ]
          }
        }
      },
      "RpcValidatorRequest": {
        "type": "object",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "epoch_id"
            ],
            "properties": {
              "epoch_id": {
                "$ref": "#/components/schemas/EpochId"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "block_id"
            ],
            "properties": {
              "block_id": {
                "$ref": "#/components/schemas/BlockId"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RpcValidatorResponse": {
        "description": "Information about this epoch validators and next epoch validators",
        "type": "object",
        "required": [
          "current_fishermen",
          "current_proposals",
          "current_validators",
          "epoch_height",
          "epoch_start_height",
          "next_fishermen",
          "next_validators",
          "prev_epoch_kickout"
        ],
        "properties": {
          "current_fishermen": {
            "description": "Fishermen for the current epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            }
          },
          "current_proposals": {
            "description": "Proposals in the current epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            }
          },
          "current_validators": {
            "description": "Validators for the current epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrentEpochValidatorInfo"
            }
          },
          "epoch_height": {
            "description": "Epoch height",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "epoch_start_height": {
            "description": "Epoch start block height",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "next_fishermen": {
            "description": "Fishermen for the next epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorStakeView"
            }
          },
          "next_validators": {
            "description": "Validators for the next epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NextEpochValidatorInfo"
            }
          },
          "prev_epoch_kickout": {
            "description": "Kickout in the previous epoch",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorKickoutView"
            }
          }
        }
      },
      "SendTxMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "send_tx"
        ]
      },
      "ShardId": {
        "description": "The shard identifier. It may be an arbitrary number - it does not need to be a number in the range 0..NUM_SHARDS. The shard ids do not need to be sequential or contiguous.\n\nThe shard id is wrapped in a new type to prevent the old pattern of using indices in range 0..NUM_SHARDS and casting to ShardId. Once the transition if fully complete it potentially may be simplified to a regular type alias.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Signature": {
        "type": "string"
      },
      "SignedDelegateAction": {
        "type": "object",
        "required": [
          "delegate_action",
          "signature"
        ],
        "properties": {
          "delegate_action": {
            "$ref": "#/components/schemas/DelegateAction"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        }
      },
      "SignedTransaction": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "signed_tx_base64"
            ],
            "properties": {
              "signed_tx_base64": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SignedTransactionView": {
        "type": "object",
        "required": [
          "actions",
          "hash",
          "nonce",
          "public_key",
          "receiver_id",
          "signature",
          "signer_id"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionView"
            }
          },
          "hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "nonce": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "priority_fee": {
            "default": 0,
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "public_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "receiver_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          },
          "signer_id": {
            "$ref": "#/components/schemas/AccountId"
          }
        }
      },
      "SlashedValidator": {
        "type": "object",
        "required": [
          "account_id",
          "is_double_sign"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "is_double_sign": {
            "type": "boolean"
          }
        }
      },
      "StakeAction": {
        "description": "An action which stakes signer_id tokens and setup's validator public key",
        "type": "object",
        "required": [
          "public_key",
          "stake"
        ],
        "properties": {
          "public_key": {
            "description": "Validator key which will be used to sign transactions on behalf of signer_id",
            "allOf": [
              {
                "$ref": "#/components/schemas/PublicKey"
              }
            ]
          },
          "stake": {
            "description": "Amount of tokens to stake.",
            "type": "string"
          }
        }
      },
      "StateSyncConfig": {
        "description": "Options for dumping state to S3.",
        "type": "object",
        "properties": {
          "dump": {
            "description": "`none` value disables state dump to external storage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DumpConfig"
              }
            ],
            "nullable": true
          },
          "sync": {
            "$ref": "#/components/schemas/SyncConfig"
          }
        }
      },
      "StatusMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "status"
        ]
      },
      "StatusSyncInfo": {
        "type": "object",
        "required": [
          "earliest_block_time",
          "latest_block_hash",
          "latest_block_height",
          "latest_block_time",
          "latest_state_root",
          "syncing"
        ],
        "properties": {
          "earliest_block_hash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptoHash"
              }
            ],
            "nullable": true
          },
          "earliest_block_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "earliest_block_time": {
            "type": "string"
          },
          "epoch_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EpochId"
              }
            ],
            "nullable": true
          },
          "epoch_start_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0,
            "nullable": true
          },
          "latest_block_hash": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "latest_block_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "latest_block_time": {
            "type": "string"
          },
          "latest_state_root": {
            "$ref": "#/components/schemas/CryptoHash"
          },
          "syncing": {
            "type": "boolean"
          }
        }
      },
      "StorageError": {
        "description": "Errors which may occur during working with trie storages, storing trie values (trie nodes and state values) by their hashes.",
        "oneOf": [
          {
            "description": "Key-value db internal failure",
            "type": "string",
            "enum": [
              "StorageInternalError"
            ]
          },
          {
            "description": "Requested trie value by its hash which is missing in storage.",
            "type": "object",
            "required": [
              "MissingTrieValue"
            ],
            "properties": {
              "MissingTrieValue": {
                "$ref": "#/components/schemas/MissingTrieValue"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Found trie node which shouldn't be part of state. Raised during validation of state sync parts where incorrect node was passed. TODO (#8997): consider including hash of trie node.",
            "type": "string",
            "enum": [
              "UnexpectedTrieValue"
            ]
          },
          {
            "description": "Either invalid state or key-value db is corrupted. For PartialStorage it cannot be corrupted. Error message is unreliable and for debugging purposes only. It's also probably ok to panic in every place that produces this error. We can check if db is corrupted by verifying everything in the state trie.",
            "type": "object",
            "required": [
              "StorageInconsistentState"
            ],
            "properties": {
              "StorageInconsistentState": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Flat storage error, meaning that it doesn't support some block anymore. We guarantee that such block cannot become final, thus block processing must resume normally.",
            "type": "object",
            "required": [
              "FlatStorageBlockNotSupported"
            ],
            "properties": {
              "FlatStorageBlockNotSupported": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "In-memory trie could not be loaded for some reason.",
            "type": "object",
            "required": [
              "MemTrieLoadingError"
            ],
            "properties": {
              "MemTrieLoadingError": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Indicates that a resharding operation on flat storage is already in progress, when it wasn't expected to be so.",
            "type": "string",
            "enum": [
              "FlatStorageReshardingAlreadyInProgress"
            ]
          }
        ]
      },
      "SyncCheckpoint": {
        "type": "string",
        "enum": [
          "genesis",
          "earliest_available"
        ]
      },
      "SyncConfig": {
        "description": "Configures how to fetch state parts during state sync.",
        "oneOf": [
          {
            "description": "Syncs state from the peers without reading anything from external storage.",
            "type": "string",
            "enum": [
              "Peers"
            ]
          },
          {
            "description": "Expects parts to be available in external storage.",
            "type": "object",
            "required": [
              "ExternalStorage"
            ],
            "properties": {
              "ExternalStorage": {
                "$ref": "#/components/schemas/ExternalStorageConfig"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Tier1ProxyView": {
        "type": "object",
        "required": [
          "addr",
          "peer_id"
        ],
        "properties": {
          "addr": {
            "type": "string"
          },
          "peer_id": {
            "$ref": "#/components/schemas/PublicKey"
          }
        }
      },
      "TransferAction": {
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "string"
          }
        }
      },
      "TxExecutionError": {
        "description": "Error returned in the ExecutionOutcome in case of failure",
        "oneOf": [
          {
            "description": "An error happened during Action execution",
            "type": "object",
            "required": [
              "ActionError"
            ],
            "properties": {
              "ActionError": {
                "$ref": "#/components/schemas/ActionError"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error happened during Transaction execution",
            "type": "object",
            "required": [
              "InvalidTxError"
            ],
            "properties": {
              "InvalidTxError": {
                "$ref": "#/components/schemas/InvalidTxError"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TxExecutionStatus": {
        "oneOf": [
          {
            "description": "Transaction is waiting to be included into the block",
            "type": "string",
            "enum": [
              "NONE"
            ]
          },
          {
            "description": "Transaction is included into the block. The block may be not finalized yet",
            "type": "string",
            "enum": [
              "INCLUDED"
            ]
          },
          {
            "description": "Transaction is included into the block + All non-refund transaction receipts finished their execution. The corresponding blocks for tx and each receipt may be not finalized yet",
            "type": "string",
            "enum": [
              "EXECUTED_OPTIMISTIC"
            ]
          },
          {
            "description": "Transaction is included into finalized block",
            "type": "string",
            "enum": [
              "INCLUDED_FINAL"
            ]
          },
          {
            "description": "Transaction is included into finalized block + All non-refund transaction receipts finished their execution. The corresponding blocks for each receipt may be not finalized yet",
            "type": "string",
            "enum": [
              "EXECUTED"
            ]
          },
          {
            "description": "Transaction is included into finalized block + Execution of all transaction receipts is finalized, including refund receipts",
            "type": "string",
            "enum": [
              "FINAL"
            ]
          }
        ]
      },
      "TxMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "tx"
        ]
      },
      "UseGlobalContractAction": {
        "description": "Use global contract action",
        "type": "object",
        "required": [
          "contract_identifier"
        ],
        "properties": {
          "contract_identifier": {
            "$ref": "#/components/schemas/GlobalContractIdentifier"
          }
        }
      },
      "ValidatorInfo": {
        "type": "object",
        "required": [
          "account_id",
          "is_slashed"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "is_slashed": {
            "type": "boolean"
          }
        }
      },
      "ValidatorKickoutReason": {
        "description": "Reasons for removing a validator from the validator set.",
        "oneOf": [
          {
            "description": "Slashed validators are kicked out.",
            "type": "string",
            "enum": [
              "Slashed"
            ]
          },
          {
            "description": "Validator didn't produce enough blocks.",
            "type": "object",
            "required": [
              "NotEnoughBlocks"
            ],
            "properties": {
              "NotEnoughBlocks": {
                "type": "object",
                "required": [
                  "expected",
                  "produced"
                ],
                "properties": {
                  "expected": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "produced": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Validator didn't produce enough chunks.",
            "type": "object",
            "required": [
              "NotEnoughChunks"
            ],
            "properties": {
              "NotEnoughChunks": {
                "type": "object",
                "required": [
                  "expected",
                  "produced"
                ],
                "properties": {
                  "expected": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "produced": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Validator unstaked themselves.",
            "type": "string",
            "enum": [
              "Unstaked"
            ]
          },
          {
            "description": "Validator stake is now below threshold",
            "type": "object",
            "required": [
              "NotEnoughStake"
            ],
            "properties": {
              "NotEnoughStake": {
                "type": "object",
                "required": [
                  "stake_u128",
                  "threshold_u128"
                ],
                "properties": {
                  "stake_u128": {
                    "type": "string"
                  },
                  "threshold_u128": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Enough stake but is not chosen because of seat limits.",
            "type": "string",
            "enum": [
              "DidNotGetASeat"
            ]
          },
          {
            "description": "Validator didn't produce enough chunk endorsements.",
            "type": "object",
            "required": [
              "NotEnoughChunkEndorsements"
            ],
            "properties": {
              "NotEnoughChunkEndorsements": {
                "type": "object",
                "required": [
                  "expected",
                  "produced"
                ],
                "properties": {
                  "expected": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "produced": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ValidatorKickoutView": {
        "type": "object",
        "required": [
          "account_id",
          "reason"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "reason": {
            "$ref": "#/components/schemas/ValidatorKickoutReason"
          }
        }
      },
      "ValidatorStakeView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "account_id",
              "public_key",
              "stake",
              "validator_stake_struct_version"
            ],
            "properties": {
              "account_id": {
                "$ref": "#/components/schemas/AccountId"
              },
              "public_key": {
                "$ref": "#/components/schemas/PublicKey"
              },
              "stake": {
                "type": "string"
              },
              "validator_stake_struct_version": {
                "type": "string",
                "enum": [
                  "V1"
                ]
              }
            }
          }
        ]
      },
      "ValidatorsMethodNameHelperEnum": {
        "type": "string",
        "enum": [
          "validators"
        ]
      },
      "Version": {
        "description": "Data structure for semver version and github tag or commit.",
        "type": "object",
        "required": [
          "build",
          "commit",
          "version"
        ],
        "properties": {
          "build": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "rustc_version": {
            "default": "",
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "WasmTrap": {
        "description": "A kind of a trap happened during execution of a binary",
        "oneOf": [
          {
            "description": "An `unreachable` opcode was executed.",
            "type": "string",
            "enum": [
              "Unreachable"
            ]
          },
          {
            "description": "Call indirect incorrect signature trap.",
            "type": "string",
            "enum": [
              "IncorrectCallIndirectSignature"
            ]
          },
          {
            "description": "Memory out of bounds trap.",
            "type": "string",
            "enum": [
              "MemoryOutOfBounds"
            ]
          },
          {
            "description": "Call indirect out of bounds trap.",
            "type": "string",
            "enum": [
              "CallIndirectOOB"
            ]
          },
          {
            "description": "An arithmetic exception, e.g. divided by zero.",
            "type": "string",
            "enum": [
              "IllegalArithmetic"
            ]
          },
          {
            "description": "Misaligned atomic access trap.",
            "type": "string",
            "enum": [
              "MisalignedAtomicAccess"
            ]
          },
          {
            "description": "Indirect call to null.",
            "type": "string",
            "enum": [
              "IndirectCallToNull"
            ]
          },
          {
            "description": "Stack overflow.",
            "type": "string",
            "enum": [
              "StackOverflow"
            ]
          },
          {
            "description": "Generic trap.",
            "type": "string",
            "enum": [
              "GenericTrap"
            ]
          }
        ]
      }
    }
  }
}
