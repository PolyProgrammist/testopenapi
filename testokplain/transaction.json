{
    "openapi": "3.0.0",
    "info": {
        "title": "My API",
        "version": "1.0.0"
    },
    "paths": {
        "/block": {
            "post": {
                "operationId": "block",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JsonRpcRequest_for_BlockMethodNameHelperEnum"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JsonRpcResponse_for_RpcBlockResponse_and_RpcError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccountId": {
                "description": "NEAR Account Identifier.\n\n This is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n [See the crate-level docs for information about validation.](index.html#account-id-rules)\n\n Also see [Error kind precedence](AccountId#error-kind-precedence).\n\n ## Examples\n\n ```\n use near_account_id::AccountId;\n\n let alice: AccountId = \"alice.near\".parse().unwrap();\n\n assert!(\"\u0192elicia.near\".parse::<AccountId>().is_err()); // (\u0192 is not f)\n ```",
                "type": "string"
            },
            "BandwidthRequest": {
                "description": "`BandwidthRequest` describes the size of receipts that a shard would like to send to another shard.\n When a shard wants to send a lot of receipts to another shard, it needs to create a request and wait\n for a bandwidth grant from the bandwidth scheduler.",
                "properties": {
                    "requested_values_bitmap": {
                        "$ref": "#/components/schemas/BandwidthRequestBitmap",
                        "description": "Bitmap which describes what values of bandwidth are requested."
                    },
                    "to_shard": {
                        "description": "Requesting bandwidth to this shard.",
                        "format": "uint16",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "to_shard",
                    "requested_values_bitmap"
                ],
                "type": "object"
            },
            "BandwidthRequestBitmap": {
                "description": "Bitmap which describes which values from the predefined list are being requested.\n The nth bit is set to 1 when the nth value from the list is being requested.",
                "properties": {
                    "data": {
                        "items": {
                            "format": "uint8",
                            "minimum": 0,
                            "type": "integer"
                        },
                        "maxItems": 5,
                        "minItems": 5,
                        "type": "array"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "BandwidthRequests": {
                "description": "A list of shard's bandwidth requests.\n Describes how much the shard would like to send to other shards.",
                "oneOf": [
                    {
                        "additionalProperties": false,
                        "properties": {
                            "V1": {
                                "$ref": "#/components/schemas/BandwidthRequestsV1"
                            }
                        },
                        "required": [
                            "V1"
                        ],
                        "type": "object"
                    }
                ]
            },
            "BandwidthRequestsV1": {
                "properties": {
                    "requests": {
                        "items": {
                            "$ref": "#/components/schemas/BandwidthRequest"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "requests"
                ],
                "type": "object"
            },
            "BlockHeaderView": {
                "properties": {
                    "approvals": {
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/Signature"
                                }
                            ],
                            "nullable": true
                        },
                        "type": "array"
                    },
                    "block_body_hash": {
                        "$ref": "#/components/schemas/CryptoHash",
                        "nullable": true
                    },
                    "block_merkle_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "block_ordinal": {
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "challenges_result": {
                        "items": {
                            "$ref": "#/components/schemas/SlashedValidator"
                        },
                        "type": "array"
                    },
                    "challenges_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "chunk_endorsements": {
                        "items": {
                            "items": {
                                "format": "uint8",
                                "minimum": 0,
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "chunk_headers_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "chunk_mask": {
                        "items": {
                            "type": "boolean"
                        },
                        "type": "array"
                    },
                    "chunk_receipts_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "chunk_tx_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "chunks_included": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "epoch_id": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "epoch_sync_data_hash": {
                        "$ref": "#/components/schemas/CryptoHash",
                        "nullable": true
                    },
                    "gas_price": {
                        "type": "string"
                    },
                    "hash": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "height": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "last_ds_final_block": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "last_final_block": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "latest_protocol_version": {
                        "format": "uint32",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "next_bp_hash": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "next_epoch_id": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "outcome_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "prev_hash": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "prev_height": {
                        "format": "uint64",
                        "minimum": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "prev_state_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "random_value": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "rent_paid": {
                        "description": "TODO(2271): deprecated.",
                        "type": "string"
                    },
                    "signature": {
                        "$ref": "#/components/schemas/Signature"
                    },
                    "timestamp": {
                        "description": "Legacy json number. Should not be used.",
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "timestamp_nanosec": {
                        "type": "string"
                    },
                    "total_supply": {
                        "type": "string"
                    },
                    "validator_proposals": {
                        "items": {
                            "$ref": "#/components/schemas/ValidatorStakeView"
                        },
                        "type": "array"
                    },
                    "validator_reward": {
                        "description": "TODO(2271): deprecated.",
                        "type": "string"
                    }
                },
                "required": [
                    "height",
                    "epoch_id",
                    "next_epoch_id",
                    "hash",
                    "prev_hash",
                    "prev_state_root",
                    "chunk_receipts_root",
                    "chunk_headers_root",
                    "chunk_tx_root",
                    "outcome_root",
                    "chunks_included",
                    "challenges_root",
                    "timestamp",
                    "timestamp_nanosec",
                    "random_value",
                    "validator_proposals",
                    "chunk_mask",
                    "gas_price",
                    "rent_paid",
                    "validator_reward",
                    "total_supply",
                    "challenges_result",
                    "last_final_block",
                    "last_ds_final_block",
                    "next_bp_hash",
                    "block_merkle_root",
                    "approvals",
                    "signature",
                    "latest_protocol_version"
                ],
                "type": "object"
            },
            "BlockId": {
                "anyOf": [
                    {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    {
                        "$ref": "#/components/schemas/CryptoHash"
                    }
                ]
            },
            "BlockMethodNameHelperEnum": {
                "enum": [
                    "block"
                ],
                "type": "string"
            },
            "CauseRpcErrorKind": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/RpcRequestValidationErrorKind"
                    },
                    {},
                    {}
                ]
            },
            "ChunkHeaderView": {
                "properties": {
                    "balance_burnt": {
                        "type": "string"
                    },
                    "bandwidth_requests": {
                        "$ref": "#/components/schemas/BandwidthRequests",
                        "nullable": true
                    },
                    "chunk_hash": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "congestion_info": {
                        "$ref": "#/components/schemas/CongestionInfoView",
                        "nullable": true
                    },
                    "encoded_length": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "encoded_merkle_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "gas_limit": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "gas_used": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "height_created": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "height_included": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "outcome_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "outgoing_receipts_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "prev_block_hash": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "prev_state_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "rent_paid": {
                        "description": "TODO(2271): deprecated.",
                        "type": "string"
                    },
                    "shard_id": {
                        "$ref": "#/components/schemas/ShardId"
                    },
                    "signature": {
                        "$ref": "#/components/schemas/Signature"
                    },
                    "tx_root": {
                        "$ref": "#/components/schemas/CryptoHash"
                    },
                    "validator_proposals": {
                        "items": {
                            "$ref": "#/components/schemas/ValidatorStakeView"
                        },
                        "type": "array"
                    },
                    "validator_reward": {
                        "description": "TODO(2271): deprecated.",
                        "type": "string"
                    }
                },
                "required": [
                    "chunk_hash",
                    "prev_block_hash",
                    "outcome_root",
                    "prev_state_root",
                    "encoded_merkle_root",
                    "encoded_length",
                    "height_created",
                    "height_included",
                    "shard_id",
                    "gas_used",
                    "gas_limit",
                    "rent_paid",
                    "validator_reward",
                    "balance_burnt",
                    "outgoing_receipts_root",
                    "tx_root",
                    "validator_proposals",
                    "signature"
                ],
                "type": "object"
            },
            "CongestionInfoView": {
                "properties": {
                    "allowed_shard": {
                        "format": "uint16",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "buffered_receipts_gas": {
                        "type": "string"
                    },
                    "delayed_receipts_gas": {
                        "type": "string"
                    },
                    "receipt_bytes": {
                        "format": "uint64",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "delayed_receipts_gas",
                    "buffered_receipts_gas",
                    "receipt_bytes",
                    "allowed_shard"
                ],
                "type": "object"
            },
            "CryptoHash": {
                "type": "string"
            },
            "Finality": {
                "description": "Different types of finality.",
                "enum": [
                    "optimistic",
                    "near-final",
                    "final"
                ],
                "type": "string"
            },
            "JsonRpcRequest_for_BlockMethodNameHelperEnum": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "jsonrpc": {
                        "type": "string"
                    },
                    "method": {
                        "$ref": "#/components/schemas/BlockMethodNameHelperEnum"
                    },
                    "params": {
                        "$ref": "#/components/schemas/RpcBlockRequest"
                    }
                },
                "required": [
                    "jsonrpc",
                    "id",
                    "params",
                    "method"
                ],
                "title": "JsonRpcRequest_for_BlockMethodNameHelperEnum",
                "type": "object"
            },
            "JsonRpcResponse_for_RpcBlockResponse_and_RpcError": {
                "anyOf": [
                    {
                        "properties": {
                            "result": {
                                "$ref": "#/components/schemas/RpcBlockResponse"
                            }
                        },
                        "required": [
                            "result"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "tmp": {
                                "$ref": "#/components/schemas/RpcError"
                            }
                        },
                        "required": [
                            "tmp"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "error": {
                                "$ref": "#/components/schemas/RpcError"
                            }
                        },
                        "required": [
                            "error"
                        ],
                        "type": "object"
                    }
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "jsonrpc": {
                        "type": "string"
                    }
                },
                "required": [
                    "jsonrpc",
                    "id"
                ],
                "title": "JsonRpcResponse_for_RpcBlockResponse_and_RpcError",
                "type": "object"
            },
            "NameRpcErrorKind": {
                "enum": [
                    "REQUEST_VALIDATION_ERROR",
                    "HANDLER_ERROR",
                    "INTERNAL_ERROR"
                ],
                "type": "string"
            },
            "PublicKey": {
                "type": "string"
            },
            "RpcBlockRequest": {
                "oneOf": [
                    {
                        "properties": {
                            "block_id": {
                                "$ref": "#/components/schemas/BlockId"
                            }
                        },
                        "required": [
                            "block_id"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "finality": {
                                "$ref": "#/components/schemas/Finality"
                            }
                        },
                        "required": [
                            "finality"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "sync_checkpoint": {
                                "$ref": "#/components/schemas/SyncCheckpoint"
                            }
                        },
                        "required": [
                            "sync_checkpoint"
                        ],
                        "type": "object"
                    }
                ],
                "type": "object"
            },
            "RpcBlockResponse": {
                "properties": {
                    "author": {
                        "$ref": "#/components/schemas/AccountId"
                    },
                    "chunks": {
                        "items": {
                            "$ref": "#/components/schemas/ChunkHeaderView"
                        },
                        "type": "array"
                    },
                    "header": {
                        "$ref": "#/components/schemas/BlockHeaderView"
                    }
                },
                "required": [
                    "author",
                    "header",
                    "chunks"
                ],
                "type": "object"
            },
            "RpcError": {
                "properties": {
                    "cause": {
                        "$ref": "#/components/schemas/CauseRpcErrorKind",
                        "nullable": true
                    },
                    "code": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "data": {
                        "nullable": true
                    },
                    "message": {
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/NameRpcErrorKind",
                        "nullable": true
                    }
                },
                "required": [
                    "code",
                    "message"
                ],
                "type": "object"
            },
            "RpcRequestValidationErrorKind": {
                "oneOf": [
                    {
                        "properties": {
                            "info": {
                                "properties": {
                                    "method_name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "method_name"
                                ],
                                "type": "object"
                            },
                            "name": {
                                "const": "METHOD_NOT_FOUND",
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "info"
                        ],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "info": {
                                "properties": {
                                    "error_message": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "error_message"
                                ],
                                "type": "object"
                            },
                            "name": {
                                "const": "PARSE_ERROR",
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "info"
                        ],
                        "type": "object"
                    }
                ]
            },
            "ShardId": {
                "description": "The shard identifier. It may be an arbitrary number - it does not need to be\n a number in the range 0..NUM_SHARDS. The shard ids do not need to be\n sequential or contiguous.\n\n The shard id is wrapped in a new type to prevent the old pattern of using\n indices in range 0..NUM_SHARDS and casting to ShardId. Once the transition\n if fully complete it potentially may be simplified to a regular type alias.",
                "format": "uint64",
                "minimum": 0,
                "type": "integer"
            },
            "Signature": {
                "type": "string"
            },
            "SlashedValidator": {
                "properties": {
                    "account_id": {
                        "$ref": "#/components/schemas/AccountId"
                    },
                    "is_double_sign": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "account_id",
                    "is_double_sign"
                ],
                "type": "object"
            },
            "SyncCheckpoint": {
                "enum": [
                    "genesis",
                    "earliest_available"
                ],
                "type": "string"
            },
            "ValidatorStakeView": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ValidatorStakeViewV1",
                        "properties": {
                            "validator_stake_struct_version": {
                                "const": "V1",
                                "type": "string"
                            }
                        },
                        "required": [
                            "validator_stake_struct_version"
                        ],
                        "type": "object"
                    }
                ]
            },
            "ValidatorStakeViewV1": {
                "properties": {
                    "account_id": {
                        "$ref": "#/components/schemas/AccountId"
                    },
                    "public_key": {
                        "$ref": "#/components/schemas/PublicKey"
                    },
                    "stake": {
                        "type": "string"
                    }
                },
                "required": [
                    "account_id",
                    "public_key",
                    "stake"
                ],
                "type": "object"
            }
        }
    }
}