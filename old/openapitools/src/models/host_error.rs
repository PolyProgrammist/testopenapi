/*
 * okapirocket
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostError {
    /// String encoding is bad UTF-16 sequence
    String(String),
    /// String encoding is bad UTF-8 sequence
    String(String),
    /// Exceeded the prepaid gas
    String(String),
    /// Exceeded the maximum amount of gas allowed to burn per contract
    String(String),
    /// Exceeded the account balance
    String(String),
    /// Tried to call an empty method name
    String(String),
    HostErrorOneOf(Box<models::HostErrorOneOf>),
    /// IntegerOverflow happened during a contract execution
    String(String),
    HostErrorOneOf1(Box<models::HostErrorOneOf1>),
    /// Actions can only be appended to non-joint promise.
    String(String),
    /// Returning joint promise is currently prohibited
    String(String),
    HostErrorOneOf2(Box<models::HostErrorOneOf2>),
    HostErrorOneOf3(Box<models::HostErrorOneOf3>),
    HostErrorOneOf4(Box<models::HostErrorOneOf4>),
    /// Accessed memory outside the bounds
    String(String),
    HostErrorOneOf5(Box<models::HostErrorOneOf5>),
    HostErrorOneOf6(Box<models::HostErrorOneOf6>),
    /// VM Logic returned an invalid account id
    String(String),
    /// VM Logic returned an invalid method name
    String(String),
    /// VM Logic provided an invalid public key
    String(String),
    HostErrorOneOf7(Box<models::HostErrorOneOf7>),
    HostErrorOneOf8(Box<models::HostErrorOneOf8>),
    HostErrorOneOf9(Box<models::HostErrorOneOf9>),
    HostErrorOneOf10(Box<models::HostErrorOneOf10>),
    HostErrorOneOf11(Box<models::HostErrorOneOf11>),
    HostErrorOneOf12(Box<models::HostErrorOneOf12>),
    HostErrorOneOf13(Box<models::HostErrorOneOf13>),
    HostErrorOneOf14(Box<models::HostErrorOneOf14>),
    HostErrorOneOf15(Box<models::HostErrorOneOf15>),
    HostErrorOneOf16(Box<models::HostErrorOneOf16>),
    HostErrorOneOf17(Box<models::HostErrorOneOf17>),
    HostErrorOneOf18(Box<models::HostErrorOneOf18>),
    HostErrorOneOf19(Box<models::HostErrorOneOf19>),
}

impl Default for HostError {
    fn default() -> Self {
        Self::String(Default::default())
    }
}

