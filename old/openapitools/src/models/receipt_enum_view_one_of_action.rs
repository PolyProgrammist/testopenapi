/*
 * okapirocket
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReceiptEnumViewOneOfAction {
    /// NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
    #[serde(rename = "signer_id")]
    pub signer_id: String,
    #[serde(rename = "signer_public_key")]
    pub signer_public_key: String,
    #[serde(rename = "gas_price")]
    pub gas_price: String,
    #[serde(rename = "output_data_receivers")]
    pub output_data_receivers: Vec<models::DataReceiverView>,
    #[serde(rename = "input_data_ids")]
    pub input_data_ids: Vec<String>,
    #[serde(rename = "actions")]
    pub actions: Vec<models::ActionView>,
    #[serde(rename = "is_promise_yield", skip_serializing_if = "Option::is_none")]
    pub is_promise_yield: Option<bool>,
}

impl ReceiptEnumViewOneOfAction {
    pub fn new(signer_id: String, signer_public_key: String, gas_price: String, output_data_receivers: Vec<models::DataReceiverView>, input_data_ids: Vec<String>, actions: Vec<models::ActionView>) -> ReceiptEnumViewOneOfAction {
        ReceiptEnumViewOneOfAction {
            signer_id,
            signer_public_key,
            gas_price,
            output_data_receivers,
            input_data_ids,
            actions,
            is_promise_yield: None,
        }
    }
}

