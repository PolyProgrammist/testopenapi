/*
 * okapirocket
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NonDelegateAction : This is Action which mustn't contain DelegateAction.  This struct is needed to avoid the recursion when Action/DelegateAction is deserialized.  Important: Don't make the inner Action public, this must only be constructed through the correct interface that ensures the inner Action is actually not a delegate action. That would break an assumption of this type, which we use in several places. For example, borsh de-/serialization relies on it. If the invariant is broken, we may end up with a `Transaction` or `Receipt` that we can serialize but deserializing it back causes a parsing error.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NonDelegateAction {
    /// Create account action
    #[serde(rename = "CreateAccount")]
    pub create_account: serde_json::Value,
    #[serde(rename = "DeployContract")]
    pub deploy_contract: Box<models::DeployContractAction>,
    #[serde(rename = "FunctionCall")]
    pub function_call: Box<models::FunctionCallAction>,
    #[serde(rename = "Transfer")]
    pub transfer: Box<models::TransferAction>,
    #[serde(rename = "Stake")]
    pub stake: Box<models::StakeAction>,
    #[serde(rename = "AddKey")]
    pub add_key: Box<models::AddKeyAction>,
    #[serde(rename = "DeleteKey")]
    pub delete_key: Box<models::DeleteKeyAction>,
    #[serde(rename = "DeleteAccount")]
    pub delete_account: Box<models::DeleteAccountAction>,
    #[serde(rename = "Delegate")]
    pub delegate: Box<models::SignedDelegateAction>,
    #[serde(rename = "DeployGlobalContract")]
    pub deploy_global_contract: Box<models::DeployGlobalContractAction>,
    #[serde(rename = "UseGlobalContract")]
    pub use_global_contract: Box<models::UseGlobalContractAction>,
}

impl NonDelegateAction {
    /// This is Action which mustn't contain DelegateAction.  This struct is needed to avoid the recursion when Action/DelegateAction is deserialized.  Important: Don't make the inner Action public, this must only be constructed through the correct interface that ensures the inner Action is actually not a delegate action. That would break an assumption of this type, which we use in several places. For example, borsh de-/serialization relies on it. If the invariant is broken, we may end up with a `Transaction` or `Receipt` that we can serialize but deserializing it back causes a parsing error.
    pub fn new(create_account: serde_json::Value, deploy_contract: models::DeployContractAction, function_call: models::FunctionCallAction, transfer: models::TransferAction, stake: models::StakeAction, add_key: models::AddKeyAction, delete_key: models::DeleteKeyAction, delete_account: models::DeleteAccountAction, delegate: models::SignedDelegateAction, deploy_global_contract: models::DeployGlobalContractAction, use_global_contract: models::UseGlobalContractAction) -> NonDelegateAction {
        NonDelegateAction {
            create_account,
            deploy_contract: Box::new(deploy_contract),
            function_call: Box::new(function_call),
            transfer: Box::new(transfer),
            stake: Box::new(stake),
            add_key: Box::new(add_key),
            delete_key: Box::new(delete_key),
            delete_account: Box::new(delete_account),
            delegate: Box::new(delegate),
            deploy_global_contract: Box::new(deploy_global_contract),
            use_global_contract: Box::new(use_global_contract),
        }
    }
}

