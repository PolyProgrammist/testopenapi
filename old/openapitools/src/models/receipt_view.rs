/*
 * okapirocket
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReceiptView {
    /// NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
    #[serde(rename = "predecessor_id")]
    pub predecessor_id: String,
    /// NEAR Account Identifier.  This is a unique, syntactically valid, human-readable account identifier on the NEAR network.  [See the crate-level docs for information about validation.](index.html#account-id-rules)  Also see [Error kind precedence](AccountId#error-kind-precedence).  ## Examples  ``` use near_account_id::AccountId;  let alice: AccountId = \"alice.near\".parse().unwrap();  assert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```
    #[serde(rename = "receiver_id")]
    pub receiver_id: String,
    #[serde(rename = "receipt_id")]
    pub receipt_id: String,
    #[serde(rename = "receipt")]
    pub receipt: Box<models::ReceiptEnumView>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
}

impl ReceiptView {
    pub fn new(predecessor_id: String, receiver_id: String, receipt_id: String, receipt: models::ReceiptEnumView) -> ReceiptView {
        ReceiptView {
            predecessor_id,
            receiver_id,
            receipt_id,
            receipt: Box::new(receipt),
            priority: None,
        }
    }
}

