/* tslint:disable */
/* eslint-disable */
/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * @type StorageError
 * Errors which may occur during working with trie storages, storing trie values (trie nodes and state values) by their hashes.
 * @export
 */
export type StorageError = StorageErrorOneOf | StorageErrorOneOf1 | StorageErrorOneOf2 | StorageErrorOneOf3 | string;

/**
 * Requested trie value by its hash which is missing in storage.
 * @export
 * @interface StorageErrorOneOf
 */
export interface StorageErrorOneOf {
    /**
     * 
     * @type {Array<StorageErrorOneOfMissingTrieValueInner>}
     * @memberof StorageErrorOneOf
     */
    'MissingTrieValue': Array<StorageErrorOneOfMissingTrieValueInner>;
}
/**
 * Either invalid state or key-value db is corrupted. For PartialStorage it cannot be corrupted. Error message is unreliable and for debugging purposes only. It\'s also probably ok to panic in every place that produces this error. We can check if db is corrupted by verifying everything in the state trie.
 * @export
 * @interface StorageErrorOneOf1
 */
export interface StorageErrorOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof StorageErrorOneOf1
     */
    'StorageInconsistentState': string;
}
/**
 * Flat storage error, meaning that it doesn\'t support some block anymore. We guarantee that such block cannot become final, thus block processing must resume normally.
 * @export
 * @interface StorageErrorOneOf2
 */
export interface StorageErrorOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof StorageErrorOneOf2
     */
    'FlatStorageBlockNotSupported': string;
}
/**
 * In-memory trie could not be loaded for some reason.
 * @export
 * @interface StorageErrorOneOf3
 */
export interface StorageErrorOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof StorageErrorOneOf3
     */
    'MemTrieLoadingError': string;
}
/**
 * @type StorageErrorOneOfMissingTrieValueInner
 * @export
 */
export type StorageErrorOneOfMissingTrieValueInner = string;


